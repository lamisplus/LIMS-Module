[{"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\index.js":"1","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\App.js":"2","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"7","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"8","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\api.js":"9","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"10","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"11","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"12","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js":"13","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js":"14","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js":"15","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js":"16","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\Result.js":"17","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js":"18","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js":"19","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js":"20","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js":"21","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js":"22","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js":"23","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js":"24"},{"size":672,"mtime":1672751849507,"results":"25","hashOfConfig":"26"},{"size":1254,"mtime":1672837471430,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1663251978370,"results":"28","hashOfConfig":"26"},{"size":9235,"mtime":1663251975986,"results":"29","hashOfConfig":"26"},{"size":3056,"mtime":1663251975987,"results":"30","hashOfConfig":"26"},{"size":3175,"mtime":1672835684937,"results":"31","hashOfConfig":"26"},{"size":3683,"mtime":1672838309160,"results":"32","hashOfConfig":"26"},{"size":16105,"mtime":1672838881675,"results":"33","hashOfConfig":"26"},{"size":482,"mtime":1673093584266,"results":"34","hashOfConfig":"26"},{"size":9166,"mtime":1663251978365,"results":"35","hashOfConfig":"26"},{"size":101260,"mtime":1667224183218,"results":"36","hashOfConfig":"26"},{"size":4318,"mtime":1672838093759,"results":"37","hashOfConfig":"26"},{"size":13529,"mtime":1672839940192,"results":"38","hashOfConfig":"26"},{"size":9120,"mtime":1672837827652,"results":"39","hashOfConfig":"26"},{"size":640,"mtime":1672752555620,"results":"40","hashOfConfig":"26"},{"size":6062,"mtime":1672757819560,"results":"41","hashOfConfig":"26"},{"size":10598,"mtime":1672756877985,"results":"42","hashOfConfig":"26"},{"size":32963,"mtime":1672756500336,"results":"43","hashOfConfig":"26"},{"size":4084,"mtime":1672758031102,"results":"44","hashOfConfig":"26"},{"size":26372,"mtime":1672757126807,"results":"45","hashOfConfig":"26"},{"size":9204,"mtime":1672758256664,"results":"46","hashOfConfig":"26"},{"size":5930,"mtime":1672755960068,"results":"47","hashOfConfig":"26"},{"size":16158,"mtime":1672758873237,"results":"48","hashOfConfig":"26"},{"size":8764,"mtime":1673109178955,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"pjo1dr",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"53"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"53"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"53"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"53"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\index.js",["110"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router } from \"react-router-dom\";\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport ThemeContext from \"./../src/main/webapp/context/ThemeContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SimpleReactLightbox>\r\n      <BrowserRouter basename=\"/\">\r\n        <ThemeContext>\r\n          <App />\r\n        </ThemeContext>\r\n      </BrowserRouter>\r\n    </SimpleReactLightbox>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["111","112"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\App.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js",["113","114"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\r\nimport SampleCollection from \"./SampleCollection/SamplesCollection\";\r\nimport SamplesTracker from \"./SampleCollection/SampleTracker\";\r\nimport ManifestList from \"./manifest/ManifestList\";\r\nimport { labObj } from \"./sampleObj\";\r\nimport Login from \"./SampleCollection/Login\";\r\nimport axios from \"axios\";\r\nimport { token, url } from \"../../api\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [key, setKey] = useState(\"manifest-list\");\r\n\r\n  const urlTabs =\r\n    props.location && props.location.state ? props.location.state : null;\r\n  const [permissions, setPermissions] = useState([]);\r\n\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${url}account`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        console.log(\"Home_permission\", response.data.permissions);\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    userPermission();\r\n\r\n    switch (urlTabs) {\r\n      case \"existing-manifest\":\r\n        return setKey(\"manifest-list\");\r\n      case \"collect-sample\":\r\n        return setKey(\"collection\");\r\n      case \"config\":\r\n        return setKey(\"config\");\r\n      case \"sample-tracker\":\r\n        return setKey(\"tracker\");\r\n      default:\r\n        return setKey(\"manifest-list\");\r\n    }\r\n  }, [urlTabs]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n                  <Tab eventKey=\"manifest-list\" title=\"Manifest List\">\r\n                    <ManifestList />\r\n                  </Tab>\r\n                  {permissions.includes(\"create_manifest\") ||\r\n                    (permissions.includes(\"all_permission\") && (\r\n                      <Tab eventKey=\"collection\" title=\"Create Manifest\">\r\n                        <SampleCollection />\r\n                      </Tab>\r\n                    ))}\r\n                  {permissions.includes(\"create_manifest\") ||\r\n                  (permissions.includes(\"all_permission\") && (\r\n                    <Tab eventKey=\"tracker\" title=\"Samples Tracker\">\r\n                      <SamplesTracker />\r\n                    </Tab>\r\n                  ))}\r\n                  {permissions.includes(\"set_configuration\") ||\r\n                    (permissions.includes(\"all_permission\") && (\r\n                      <Tab eventKey=\"config\" title=\"Configuration\">\r\n                        <Login />\r\n                      </Tab>\r\n                    ))}\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["115","116","117","118","119"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./sample.css\";\r\nimport { format } from \"date-fns\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport uniq from \"lodash/uniq\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers-pro\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers-pro/AdapterDayjs\";\r\nimport { DateRangePicker } from \"@mui/x-date-pickers-pro/DateRangePicker\";\r\n\r\nimport { forwardRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst SampleSearch = (props) => {\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [collectedSamples, setCollectedSamples] = useState([]);\r\n  const [manifestData, setManifestData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const tableRef = React.createRef();\r\n  const [config, setConfig] = useState([]);\r\n  const [value, setValue] = React.useState([null, null]);\r\n\r\n  let start_date = value[0] != null ? value[0].$d : null;\r\n  let end_date = value[1] != null ? value[1].$d : null;\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/configs`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setConfig(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const loadLabTestData = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/collected-samples/?searchParam=*&pageNo=0&pageSize=100`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      //console.log(\"samples\", response);\r\n      if (response.data.records === null) {\r\n      } else {\r\n        setCollectedSamples(response.data.records);\r\n        setLoading(false);\r\n      }\r\n\r\n      localStorage.removeItem(\"samples\");\r\n      localStorage.removeItem(\"manifest\");\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching lab samples data\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const loadManifestData = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/manifests?searchParam=*&pageNo=0&pageSize=100`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      console.log(\"manifest\", response);\r\n      let arr = [];\r\n      if (response.data.records === null) {\r\n      } else {\r\n        response.data.records.forEach((x) => {\r\n          x.sampleInformation.forEach((y) => {\r\n            arr.push(y);\r\n          });\r\n        });\r\n      }\r\n      setManifestData(arr);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching manifest data\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  //    const handlePulledData = query =>\r\n  //         new Promise((resolve, reject) => {\r\n  //              axios.get(`${url}lims/collected-samples/?searchParam=${query.search}&pageNo=${query.page}&pageSize=${query.pageSize}`,\r\n  //              { headers: {\"Authorization\" : `Bearer ${token}`} })\r\n  //                 .then(resp => resp)\r\n  //                 .then(result => {\r\n  //                 console.log(\"inside1\",start_date, end_date);\r\n  //                 if (result.data.records === null) {\r\n  //                      resolve({\r\n  //                          data: [],\r\n  //                          page: 0,\r\n  //                          totalCount: 0\r\n  //                      })\r\n  //                  }else {\r\n  //                    resolve({\r\n  //                      data: result.data.records.\r\n  //                      filter( row => {\r\n  //                         let filterPass = true\r\n  //\r\n  //                         const date = new Date(row.sampleCollectionDate)\r\n  //                         console.log(\"inside2\",start_date, end_date);\r\n  //                         if (start_date != null) {\r\n  //                           filterPass = filterPass && (new Date(start_date) <= date)\r\n  //                         }\r\n  //                         if (end_date != null) {\r\n  //                           filterPass = filterPass && (new Date(end_date) >= date)\r\n  //                         }\r\n  //                         return filterPass\r\n  //                    }).map((row) => ({\r\n  //                        typecode: row.patientID.idTypeCode,\r\n  //                        patientId: row.patientID.idNumber,\r\n  //                        firstname: row.firstName,\r\n  //                        surname: row.surName,\r\n  //                        sex: row.sex,\r\n  //                        dob: row.dateOfBirth,\r\n  //                        age: calculate_age(row.dateOfBirth),\r\n  //                        testType: \"VL\",\r\n  //                        sampleId: row.sampleID,\r\n  //                        sampleType: row.sampleType,\r\n  //                        orderby: row.sampleOrderedBy,\r\n  //                        orderbydate: row.sampleOrderDate,\r\n  //                        collectedby: row.sampleCollectedBy,\r\n  //                        datecollected: row.sampleCollectionDate,\r\n  //                        timecollected: row.sampleCollectionTime\r\n  //                      })),\r\n  //                      page: query.page,\r\n  //                      totalCount: result.data.totalRecords\r\n  //                  })\r\n  //                  }\r\n  //              })\r\n  //         })\r\n\r\n  useEffect(() => {\r\n    setLoading(\"true\");\r\n    loadManifestData();\r\n    loadLabTestData();\r\n    loadConfig();\r\n    props.setSubmitted(1);\r\n  }, [loadLabTestData]);\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var birthDate = new Date(dob);\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    return age_now;\r\n  };\r\n\r\n  const handleSampleChanges = (sample) => {\r\n    let samples = [];\r\n\r\n    let uniqueSamples = uniq(sample).map((item) => {\r\n      samples.push({\r\n        patientID: [\r\n          {\r\n            idNumber: item.patientId,\r\n            idTypeCode: item.typecode,\r\n          },\r\n        ],\r\n        firstName: item.firstname,\r\n        surName: item.surname,\r\n        sex: item.sex,\r\n        pregnantBreastFeedingStatus: \"\",\r\n        age: 0,\r\n        dateOfBirth: item.dob,\r\n        age: item.age,\r\n        sampleID: item.sampleId,\r\n        sampleType: item.sampleType,\r\n        indicationVLTest: 1,\r\n        artCommencementDate: \"\",\r\n        drugRegimen: \"\",\r\n        sampleOrderedBy: item.orderby,\r\n        sampleOrderDate: item.orderbydate,\r\n        sampleCollectedBy: item.collectedby,\r\n        sampleCollectionDate: item.datecollected,\r\n        sampleCollectionTime: item.timecollected,\r\n        dateSampleSent: format(new Date(), \"yyyy-MM-dd\"),\r\n        id: 0,\r\n        manifestID: 0,\r\n        pid: 0,\r\n        priority: 0,\r\n      });\r\n    });\r\n\r\n    localStorage.setItem(\"samples\", JSON.stringify(samples));\r\n  };\r\n\r\n  const sampleFilter = (collectedSamples, manifestData) => {\r\n    if (collectedSamples && manifestData) {\r\n      return collectedSamples.filter((x) => {\r\n        return !manifestData.some((y) => {\r\n          return x.sampleID === y.sampleID;\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const values = sampleFilter(collectedSamples, manifestData);\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          {config.length !== 0 ? (\r\n            \" \"\r\n          ) : (\r\n            <Alert variant=\"danger\">\r\n              Och kindly set up LIMS server configurations to enable you\r\n              proceed!!!\r\n            </Alert>\r\n          )}\r\n          <Grid container spacing={2}>\r\n            <LocalizationProvider\r\n              dateAdapter={AdapterDayjs}\r\n              localeText={{ start: \"Start-Date\", end: \"End-Date\" }}\r\n            >\r\n              <DateRangePicker\r\n                value={value}\r\n                onChange={(newValue) => {\r\n                  setValue(newValue);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <TextField {...startProps} />\r\n                    <Box sx={{ mx: 2 }}> to </Box>\r\n                    <TextField {...endProps} />\r\n                  </React.Fragment>\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n\r\n            {/*   <Grid item xs={2}>\r\n                   <FormGroup>\r\n                       <Label for=\"startDate\" className={classes.label}>Start date</Label>\r\n\r\n                       <Input\r\n                           type=\"date\"\r\n                           name=\"startDate\"\r\n\r\n                           id=\"startDate\"\r\n                           placeholder=\"Start Date\"\r\n                           onChange={handleChange}\r\n                           className={classes.input}\r\n                       />\r\n                   </FormGroup>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                    <FormGroup>\r\n                      <Label for=\"endDate\" className={classes.label}>End date</Label>\r\n\r\n                      <Input\r\n                          type=\"date\"\r\n                          name=\"endDate\"\r\n\r\n                          id=\"endDate\"\r\n                          placeholder=\"End Date\"\r\n                          onChange={handleChange}\r\n                          className={classes.input}\r\n                      />\r\n                  </FormGroup>\r\n              </Grid>\r\n\r\n              <Grid item xs={2}>\r\n\r\n              </Grid>\r\n              */}\r\n          </Grid>\r\n          <br />\r\n          <MaterialTable\r\n            icons={tableIcons}\r\n            title=\"Sample Collection List\"\r\n            tableRef={tableRef}\r\n            columns={[\r\n              { title: \"Type code\", field: \"typecode\" },\r\n              { title: \"Hospital ID\", field: \"patientId\" },\r\n              { title: \"First Name\", field: \"firstname\" },\r\n              { title: \"Surname\", field: \"surname\" },\r\n              { title: \"Sex\", field: \"sex\" },\r\n              { title: \"DOB\", field: \"dob\" },\r\n              { title: \"Age\", field: \"age\" },\r\n              {\r\n                title: \"Test Type\",\r\n                field: \"testType\",\r\n              },\r\n              { title: \"Sample ID\", field: \"sampleId\" },\r\n              {\r\n                title: \"Sample Type\",\r\n                field: \"sampleType\",\r\n              },\r\n              { title: \"Sample Orderby\", field: \"orderby\" },\r\n              {\r\n                title: \"Orderby Date\",\r\n                field: \"orderbydate\",\r\n                type: \"date\",\r\n                filtering: false,\r\n              },\r\n              { title: \"Collected By\", field: \"collectedby\" },\r\n              {\r\n                title: \"Date Collected\",\r\n                field: \"datecollected\",\r\n                type: \"date\",\r\n                filtering: false,\r\n              },\r\n              {\r\n                title: \"Time Collected\",\r\n                field: \"timecollected\",\r\n                type: \"time\",\r\n                filtering: false,\r\n              },\r\n            ]}\r\n            isLoading={loading}\r\n            // data={handlePulledData}\r\n            data={values\r\n              .filter((row) => {\r\n                let filterPass = true;\r\n\r\n                const date = new Date(row.sampleCollectionDate);\r\n\r\n                if (start_date != null) {\r\n                  filterPass = filterPass && new Date(start_date) <= date;\r\n                }\r\n                if (end_date != null) {\r\n                  filterPass = filterPass && new Date(end_date) >= date;\r\n                }\r\n                return filterPass;\r\n              })\r\n              .map((row) => ({\r\n                typecode: row.patientID.idTypeCode,\r\n                patientId: row.patientID.idNumber,\r\n                firstname: row.firstName,\r\n                surname: row.surName,\r\n                sex: row.sex,\r\n                dob: row.dateOfBirth,\r\n                age: calculate_age(row.dateOfBirth),\r\n                testType: \"VL\",\r\n                sampleId: row.sampleID,\r\n                sampleType: row.sampleType,\r\n                orderby: row.sampleOrderedBy,\r\n                orderbydate: row.sampleOrderDate,\r\n                collectedby: row.sampleCollectedBy,\r\n                datecollected: row.sampleCollectionDate,\r\n                timecollected: row.sampleCollectionTime,\r\n              }))}\r\n            options={{\r\n              headerStyle: {\r\n                backgroundColor: \"#014d88\",\r\n                color: \"#fff\",\r\n                fontSize: \"16px\",\r\n                padding: \"10px\",\r\n              },\r\n              searchFieldStyle: {\r\n                width: \"300%\",\r\n                margingLeft: \"250px\",\r\n              },\r\n              selection: true,\r\n              filtering: false,\r\n              exportButton: false,\r\n              searchFieldAlignment: \"left\",\r\n              pageSizeOptions: [10, 20, 100],\r\n              pageSize: 10,\r\n              debounceInterval: 400,\r\n            }}\r\n            onSelectionChange={(rows) => handleSampleChanges(rows)}\r\n            onChangePage={handleChangePage}\r\n            localization={localization}\r\n          />\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SampleSearch;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\api.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["120"],"import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\r\nimport Grow from \"@mui/material/Grow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Popper from \"@mui/material/Popper\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport MenuList from \"@mui/material/MenuList\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst options = [\"Delete\", \"Edit\"];\r\n\r\nexport default function SplitActionButton(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup\r\n        variant=\"contained\"\r\n        ref={anchorRef}\r\n        style={{\r\n          backgroundColor: \"rgb(153, 46, 98)\",\r\n          height: \"30px\",\r\n          width: \"150px\",\r\n        }}\r\n      >\r\n        <Link\r\n          to={props.actions[0].to}\r\n          style={{ borderRight: \"20px solid #fff !important\" }}\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            onClick={handleClick}\r\n            variant=\"contained\"\r\n            startIcon={props.actions[0].icon}\r\n            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n          >\r\n            <Typography variant=\"h7\" style={{ fontWeight: \"bolder\" }}>\r\n              {props.actions[0].name}\r\n            </Typography>\r\n          </Button>\r\n        </Link>\r\n\r\n        <Divider\r\n          orientation=\"vertical\"\r\n          flexItem\r\n          style={{\r\n            borderRight: \"20px solid #fff !important\",\r\n            backgroundColor: \"#fff\",\r\n            width: \"1px\",\r\n            height: \"26px\",\r\n            marginTop: \"2px\",\r\n          }}\r\n        >\r\n          1\r\n        </Divider>\r\n        <Button\r\n          size=\"medium\"\r\n          aria-controls={open ? \"split-button-menu\" : undefined}\r\n          aria-expanded={open ? \"true\" : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n          style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        >\r\n          <FaCaretDown size=\"24\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n        style={{ zIndex: \"10000\" }}\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n              zIndex: \"1000\",\r\n            }}\r\n          >\r\n            {/*width: 130,*/}\r\n            <Paper\r\n              sx={{\r\n                minWidth: \"130px\",\r\n                maxWidth: \"150px\",\r\n                marginTop: \"2px\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                  {props.actions.slice(1).map((option, index) => (\r\n                    <MenuItem key={Math.random()}>\r\n                      <Link to={option.to}>\r\n                        {option.icon}\r\n                        <span\r\n                          style={{\r\n                            color: \"rgb(153, 46, 98)\",\r\n                            fontWeight: \"bolder\",\r\n                            fontSize: \"12px\",\r\n                          }}\r\n                        >\r\n                          {option.name}\r\n                        </span>\r\n                      </Link>\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js",["121"],"import React, {\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from \"reactstrap\";\r\n\r\nimport \"./sample.css\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  let history = useHistory();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [demo, setDemo] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(true);\r\n  const [login, setLogin] = useState({\r\n    configName: \"\",\r\n    serverUrl: \"\",\r\n    configEmail: \"\",\r\n    configPassword: \"\",\r\n    testFacilityDATIMCode: \"\",\r\n    testFacilityName: \"\",\r\n  });\r\n\r\n  const [logins, setLogins] = useState([]);\r\n\r\n  const loadResults = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/configs`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setLogins(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadResults();\r\n  }, [loadResults]);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    //console.log(name, value)\r\n    if (name === \"configName\" && value === \"Demo Server\") {\r\n      setDemo(true);\r\n    } else if (name === \"configName\" && value === \"Live Server\") {\r\n      setDemo(false);\r\n    }\r\n    setLogin({ ...login, [name]: value });\r\n  };\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.configName = login.configName ? \"\" : \"Server Name is required.\";\r\n    temp.serverUrl = login.serverUrl ? \"\" : \"Server URL is required.\";\r\n    temp.configEmail = login.configEmail ? \"\" : \"Email is required.\";\r\n    temp.configPassword = login.configPassword\r\n      ? \"\"\r\n      : \"Configuration password URL is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (validateInputs()) {\r\n        await axios\r\n          .post(`${url}lims/configs`, login, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((resp) => {\r\n            console.log(\"login details\", resp);\r\n\r\n            toast.success(\"LIMS Credentials saved successfully!!\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n\r\n            setLogin({\r\n              configName: \"\",\r\n              serverUrl: \"\",\r\n              configEmail: \"\",\r\n              configPassword: \"\",\r\n              facilityId: \"\",\r\n              receivingPCRLabId: \"\",\r\n            });\r\n          });\r\n\r\n        loadResults();\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while saving LIMS Credentials\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const deleteConfig = async (e, id) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.delete(`${url}lims/configs/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      console.log(\" delete config\", response);\r\n      loadResults();\r\n      toast.success(\"LIMS Credentials deleted successfully!!\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while deleting a config\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <hr />\r\n          {\r\n            <>\r\n              <Alert\r\n                style={{\r\n                  width: \"100%\",\r\n                  fontSize: \"16px\",\r\n                  backgroundColor: \"#014d88\",\r\n                  color: \"#fff\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Alert.Heading>LIMS Configuration Details</Alert.Heading>\r\n              </Alert>\r\n\r\n              <Row>\r\n                <Col xs={6} md={4}>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label for=\"configName\" className={classes.label}>\r\n                        Configuration Name\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        name=\"configName\"\r\n                        value={login.configName}\r\n                        id=\"configName\"\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option hidden>Select Configuration Server</option>\r\n                        <option value=\"Demo Server\">Demo Server</option>\r\n                        <option value=\"Live Server\">Live Server</option>\r\n                      </select>\r\n\r\n                      {errors.configName !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configName}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"serverUrl\" className={classes.label}>\r\n                        URL\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"serverUrl\"\r\n                        id=\"serverUrl\"\r\n                        placeholder=\"Server URL\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.serverUrl}\r\n                      />\r\n                      {errors.serverUrl !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.serverUrl}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"configEmail\" className={classes.label}>\r\n                        Email\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"configEmail\"\r\n                        id=\"configEmail\"\r\n                        placeholder=\"E-Mail\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.configEmail}\r\n                      />\r\n                      {errors.configEmail !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configEmail}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                      <Label for=\"configPassword\" className={classes.label}>\r\n                        Password\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"password\"\r\n                        name=\"configPassword\"\r\n                        id=\"configPassword\"\r\n                        placeholder=\"configuration password\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.configPassword}\r\n                      />\r\n\r\n                      {errors.configPassword !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configPassword}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    {demo === true ? (\r\n                      <>\r\n                        <FormGroup>\r\n                          <Label\r\n                            for=\"testFacilityDATIMCode\"\r\n                            className={classes.label}\r\n                          >\r\n                            Testing Facility Datim Code\r\n                          </Label>\r\n\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"testFacilityDATIMCode\"\r\n                            id=\"testFacilityDATIMCode\"\r\n                            placeholder=\"Testing Facility Datim Code\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                            value={login.testFacilityDATIMCode}\r\n                          />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                          <Label\r\n                            for=\"testFacilityName\"\r\n                            className={classes.label}\r\n                          >\r\n                            Testing Facility Name\r\n                          </Label>\r\n\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"testFacilityName\"\r\n                            id=\"testFacilityName\"\r\n                            placeholder=\"Testing Facility Name\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                            value={login.testFacilityName}\r\n                          />\r\n                        </FormGroup>\r\n                      </>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      startIcon={<SaveIcon />}\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Form>\r\n                </Col>\r\n                <Col xs={6} md={8}>\r\n                  <Table bordered size=\"sm\" responsive>\r\n                    <thead\r\n                      style={{\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th>S/N</th>\r\n                        <th>Configuration Name</th>\r\n                        <th>URL</th>\r\n                        <th>Email</th>\r\n                        {/*<th>Created Date</th>*/}\r\n                        <th>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody style={{ textAlign: \"center\" }}>\r\n                      {logins &&\r\n                        logins.map((data, i) => (\r\n                          <tr key={i}>\r\n                            <td>{++i}</td>\r\n                            <td>{data.configName}</td>\r\n                            <td>{data.serverUrl}</td>\r\n                            <td>{data.configEmail}</td>\r\n                            {/*<td>09/09/2022</td>*/}\r\n                            <td>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"error\"\r\n                                startIcon={<DeleteIcon />}\r\n                                onClick={(e) => deleteConfig(e, data.id)}\r\n                              ></Button>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          }\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js",["122","123","124"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst ConfigModal = (props) => {\r\n  const { manifestsId } = props;\r\n\r\n  const classes = useStyles();\r\n  const [saved, setSaved] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  const [logins, setLogins] = useState([]);\r\n\r\n  const [configId, setConfigId] = useState(0);\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/configs`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setLogins(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n  }, [loadConfig]);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setConfigId(parseInt(value));\r\n    setSaved(true);\r\n  };\r\n\r\n  const saveSample = async (e) => {\r\n    e.preventDefault();\r\n    //console.log(configId)\r\n    //setSaved(true);\r\n    toast.success(\"Sample manifest saved successfully!!\", {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n    });\r\n\r\n    props.togglestatus();\r\n  };\r\n\r\n  const sendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const timer = setInterval(() => {\r\n      props.handleProgress((prevProgress) =>\r\n        prevProgress >= 100 ? 100 : prevProgress + 2\r\n      );\r\n    }, 500);\r\n\r\n    localStorage.setItem(\"configId\", JSON.stringify(configId));\r\n    props.togglestatus();\r\n    try {\r\n      await axios\r\n        .get(`${url}lims/ready-manifests/${manifestsId}/${configId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          if (resp) {\r\n            console.log(\"sending manifest\", resp);\r\n            props.handleProgress(100);\r\n            props.submitted(2);\r\n\r\n            toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          props.setFailed(true);\r\n\r\n          clearInterval(timer);\r\n          console.log(\"err\", err);\r\n          toast.error(\"Poor Internet Connection....\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          props.handleOpen();\r\n        });\r\n    } catch (err) {\r\n      props.setFailed(true);\r\n\r\n      clearInterval(timer);\r\n      toast.error(\"Error encountered while sending manifest\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n\r\n      props.handleOpen();\r\n    }\r\n  };\r\n\r\n  const resendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    props.handleProgress(20);\r\n    const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n\r\n    try {\r\n      props.handleProgress(50);\r\n      await axios\r\n        .get(`${url}lims/ready-manifests/${manifestsId}/${serverId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          props.handleProgress(70);\r\n\r\n          if (resp) {\r\n            console.log(\"re sending manifest\", resp);\r\n            props.handleProgress(100);\r\n          }\r\n\r\n          toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          props.handleProgress(10);\r\n\r\n          toast.success(\"Server currently down!!! Try sending manifest later\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          props.handleProgress(0);\r\n          props.handleOpen();\r\n        });\r\n    } catch (err) {\r\n      props.handleProgress(10);\r\n      toast.error(\"Error encountered while sending manifest\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      props.handleOpen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form onSubmit={saveSample}>\r\n              <ModalHeader toggle={props.togglestatus}></ModalHeader>\r\n              <ModalBody>\r\n                {props.failed ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label for=\"configName\" className={classes.label}>\r\n                            Which PCR Server are you sending to?\r\n                          </Label>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"config\"\r\n                            id=\"config\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option hidden>Select Server</option>\r\n                            {logins &&\r\n                              logins.map((data, i) => (\r\n                                <option key={i} value={data.id}>\r\n                                  {data.configName}\r\n                                </option>\r\n                              ))}\r\n                          </Input>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col></Col>\r\n                    </Row>\r\n\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      startIcon={<SendIcon />}\r\n                      type=\"submit\"\r\n                      onClick={sendManifest}\r\n                      disabled={saved ? false : true}\r\n                    >\r\n                      Send\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n\r\n                {!props.failed ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      disabled={loading}\r\n                      onClick={saveSample}\r\n                    >\r\n                      Save\r\n                    </MatButton>{\" \"}\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      startIcon={<SendIcon />}\r\n                      type=\"submit\"\r\n                      onClick={resendManifest}\r\n                    >\r\n                      Re-send\r\n                    </MatButton>{\" \"}\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"default\"\r\n                      onClick={props.togglestatus}\r\n                      className={classes.button}\r\n                      startIcon={<CancelIcon />}\r\n                    >\r\n                      Cancel\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigModal;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js",["125"],"import PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst ProgressBar = (props) => {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js",["126","127","128"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ProgressBar from \"../SampleCollection/Progressbar\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ManifestPrint from \"./ManifestPrint\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport ConfigModal from \"../SampleCollection/ConfigModal\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst PrintManifest = (props) => {\r\n  let history = useHistory();\r\n  const sampleObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.sampleObj\r\n      : {};\r\n  //console.log(\"props\",sampleObj)\r\n  const classes = useStyles();\r\n\r\n  const [saved, setSaved] = useState(false);\r\n  const [localStore, SetLocalStore] = useState([]);\r\n  const [send, setSend] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [failed, setFailed] = useState(false);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const toggleModal = () => setOpen(!open);\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const manifests = JSON.parse(localStorage.getItem(\"manifest\"));\r\n    if (manifests) {\r\n      SetLocalStore(manifests);\r\n      localStorage.removeItem(\"manifest\");\r\n    } else {\r\n      SetLocalStore(sampleObj);\r\n    }\r\n  }, []);\r\n\r\n  const sendManifest = async (e) => {\r\n    e.preventDefault();\r\n    handleOpen();\r\n    setProgress(10);\r\n  };\r\n\r\n  const handleProgress = (progessCount) => {\r\n    setProgress(progessCount);\r\n  };\r\n\r\n  const handleFailure = (status) => {\r\n    setFailed(!failed);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Card.Body>\r\n          {Object.keys(localStore).length === 0 ? (\r\n            <Alert\r\n              variant=\"danger\"\r\n              style={{ width: \"100%\", fontSize: \"18px\", textAlign: \"center\" }}\r\n            >\r\n              <b>Sample Manifest</b> not created yet. pls complete the manifest\r\n              form.\r\n            </Alert>\r\n          ) : (\r\n            <>\r\n              <p style={{ textAlign: \"right\" }}>\r\n                {localStore.manifestStatus === \"Ready\" ? (\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"success\"\r\n                    className={classes.button}\r\n                    startIcon={<SendIcon />}\r\n                    disabled={!send ? false : true}\r\n                    onClick={sendManifest}\r\n                  >\r\n                    Send Manifest\r\n                  </MatButton>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  className={classes.button}\r\n                  startIcon={<PrintIcon />}\r\n                  disabled={!send ? false : true}\r\n                  onClick={handlePrint}\r\n                >\r\n                  Print\r\n                </MatButton>\r\n\r\n                <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<HomeIcon />}\r\n                  >\r\n                    back Home\r\n                  </MatButton>\r\n                </Link>\r\n                <Link\r\n                  color=\"inherit\"\r\n                  to={{\r\n                    pathname: \"/result\",\r\n                    state: { manifestObj: localStore },\r\n                  }}\r\n                >\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    startIcon={<HomeIcon />}\r\n                  >\r\n                    Results\r\n                  </MatButton>\r\n                </Link>\r\n              </p>\r\n              {progress !== 0 ? (\r\n                <>\r\n                  <span>Sending manifest to PCR Lab</span>\r\n                  <ProgressBar value={progress} />\r\n                </>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <ManifestPrint sampleObj={localStore} ref={componentRef} />\r\n            </>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n      {open ? (\r\n        <ConfigModal\r\n          modalstatus={open}\r\n          togglestatus={toggleModal}\r\n          manifestsId={sampleObj.id}\r\n          saved={saved}\r\n          handleProgress={handleProgress}\r\n          handleFailure={handleFailure}\r\n        />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrintManifest;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\Result.js",["129","130"],"import React, {\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useRef,\r\n} from \"react\";\r\n\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport AddResultModal from \"./AddResultModal\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport CachedIcon from \"@mui/icons-material/Cached\";\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport PrintResults from \"./PrintResults\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Result = (props) => {\r\n  let history = useHistory();\r\n  const manifestObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.manifestObj\r\n      : {};\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(true);\r\n  const [results, setResults] = useState([]);\r\n  const [logins, setLogins] = useState([]);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const toggleModal = () => setOpen(!open);\r\n\r\n  const componentRef = useRef();\r\n\r\n  const loadConfigs = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/configs`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setLogins(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const loadResults = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${url}lims/results/manifests/${manifestObj.id}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      //console.log(\"results\", response.data);\r\n      setResults(response.data.results);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      setLoading(false);\r\n    }\r\n  }, [manifestObj.id]);\r\n\r\n  const getPCResults = useCallback(async () => {\r\n    try {\r\n      const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n\r\n      if (manifestObj.id !== 0) {\r\n        const response = await axios.get(\r\n          `${url}lims/manifest-results/${manifestObj.id}/${parseInt(serverId)}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        if (response.data.viralLoadTestReport !== null) {\r\n          setResults(response.data.viralLoadTestReport);\r\n\r\n          response.data.viralLoadTestReport.forEach((d) => {\r\n            if (d.approvalDate !== \"\" && d.testResult !== \"\") {\r\n              let result = {\r\n                manifestRecordID: manifestObj.id,\r\n                dateResultDispatched: d.dateResultDispatched,\r\n                dateSampleReceivedAtPcrLab: d.dateSampleReceivedAtPcrLab,\r\n                testResult: d.testResult,\r\n                resultDate: d.resultDate,\r\n                pcrLabSampleNumber: d.pcrLabSampleNumber,\r\n                approvalDate: d.approvalDate,\r\n                assayDate: d.assayDate,\r\n                sampleTestable: d.sampleTestable,\r\n                sampleStatus: d.sampleStatus,\r\n                sampleID: d.sampleID,\r\n                uuid: \"\",\r\n                visitDate: d.visitDate,\r\n                transferStatus: d.transferStatus,\r\n                testedBy: d.transferStatus,\r\n                approvedBy: d.approvedBy,\r\n                dateTransferredOut: d.dateTransferredOut,\r\n                reasonNotTested: d.reasonNotTested,\r\n                otherRejectionReason: d.otherRejectionReason,\r\n                sendingPCRLabID: d.sendingPCRLabID,\r\n                sendingPCRLabName: d.sendingPCRLabName,\r\n              };\r\n              //console.log(\"results\", result)\r\n\r\n              axios\r\n                .post(`${url}lims/results`, [result], {\r\n                  headers: { Authorization: `Bearer ${token}` },\r\n                })\r\n                .then((resp) => {\r\n                  // console.log(\"results saved\", resp)\r\n                });\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        toast.success(\r\n          \"Sample results are currently been processed, check back in a bit\",\r\n          {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          }\r\n        );\r\n      }\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while getting manifest results\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, [manifestObj.id]);\r\n\r\n  useEffect(() => {\r\n    loadResults();\r\n    loadConfigs();\r\n    getPCResults();\r\n  }, [loadResults, getPCResults, loadConfigs]);\r\n\r\n  const reload = (e) => {\r\n    getPCResults();\r\n  };\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  //     const handleChange = async (event) => {\r\n  //           const { name, value } = event.target\r\n  //           try {\r\n  //                if (manifestObj.id !== 0) {\r\n  //                     const response = await axios.get(`${url}lims/manifest-results/${manifestObj.id}/${parseInt(value)}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n  //                     console.log(\"manifest results\", response.data);\r\n  //                     // saved to db\r\n  //                     if (response.data.viralLoadTestReport !== null) {\r\n  //                        setResults(response.data.viralLoadTestReport);\r\n  //                     }\r\n  //                }else {\r\n  //                    toast.success(\"Sample results are currently been processed, check back in a bit\", {\r\n  //                        position: toast.POSITION.TOP_RIGHT\r\n  //                    });\r\n  //                }\r\n  //\r\n  //                 setLoading(false)\r\n  //\r\n  //             } catch (e) {\r\n  //                 toast.error(\"An error occurred while getting manifest results\", {\r\n  //                     position: toast.POSITION.TOP_RIGHT\r\n  //                 });\r\n  //                 setLoading(false)\r\n  //             }\r\n  //     }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <p style={{ textAlign: \"right\" }}>\r\n            <MatButton\r\n              variant=\"contained\"\r\n              color=\"dark\"\r\n              className={classes.button}\r\n              startIcon={<AddIcon />}\r\n              onClick={handleOpen}\r\n            >\r\n              Add Result\r\n            </MatButton>\r\n            <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className={classes.button}\r\n              startIcon={<CachedIcon />}\r\n              onClick={reload}\r\n            >\r\n              Refresh\r\n            </MatButton>\r\n            <MatButton\r\n              variant=\"contained\"\r\n              color=\"success\"\r\n              className={classes.button}\r\n              startIcon={<PrintIcon />}\r\n              onClick={handlePrint}\r\n            >\r\n              Print\r\n            </MatButton>\r\n\r\n            <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n              <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<HomeIcon />}\r\n              >\r\n                back Home\r\n              </MatButton>\r\n            </Link>\r\n          </p>\r\n          {/*<Row>\r\n               <Col>\r\n                  <FormGroup>\r\n                     <Label for=\"configName\" className={classes.label}>Configuration Setting</Label>\r\n                     <Input\r\n                         type=\"select\"\r\n                         name=\"config\"\r\n                         id=\"config\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                     >\r\n                      <option hidden>\r\n                          Which server are you pulling sample results from?\r\n                      </option>\r\n                      { logins && logins.map((data, i) => (\r\n                          <option key={i} value={data.id}>\r\n                              {data.configName}\r\n                          </option>\r\n                      ))}\r\n                     </Input>\r\n                 </FormGroup>\r\n              </Col>\r\n              <Col>\r\n              </Col>\r\n              </Row>*/}\r\n          <hr />\r\n          {\r\n            <>\r\n              <Alert\r\n                style={{\r\n                  width: \"100%\",\r\n                  fontSize: \"20px\",\r\n                  backgroundColor: \"#014d88\",\r\n                  color: \"#fff\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Alert.Heading>PCR Sample Results</Alert.Heading>\r\n              </Alert>\r\n              <br />\r\n              <PrintResults\r\n                manifestObj={manifestObj}\r\n                results={results}\r\n                ref={componentRef}\r\n              />\r\n            </>\r\n          }\r\n        </Card.Body>\r\n      </Card>\r\n      {open ? (\r\n        <AddResultModal\r\n          modalstatus={open}\r\n          togglestatus={toggleModal}\r\n          manifestObj={manifestObj}\r\n          results={results}\r\n          reload={reload}\r\n        />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js",["131","132","133"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Alert,\r\n  Col,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { format } from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { pcr_lab } from \"../SampleCollection/pcr\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  arial: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"15px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  modalStyle1: {\r\n    position: \"absolute\",\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst AddResultModal = (props) => {\r\n  const classes = useStyles();\r\n  const { manifestObj, reload } = props;\r\n  //console.log(\"main\", manifestObj)\r\n\r\n  const sampleIDs = [];\r\n  manifestObj.sampleInformation.forEach((e) => {\r\n    sampleIDs.push(e);\r\n  });\r\n\r\n  const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\" });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  const [tests, setTests] = useState(false);\r\n  const [transferredOut, setTransferredOut] = useState(false);\r\n  const [reasons, setReasons] = useState(false);\r\n  const [reasonsNot, setReasonsNot] = useState(false);\r\n  const [transferredStatus, setTransferredStatus] = useState(false);\r\n  const [inputFields, setInputFields] = useState({\r\n    manifestRecordID: manifestObj.id,\r\n    //id: 0,\r\n    dateResultDispatched: \"\",\r\n    dateSampleReceivedAtPcrLab: \"\",\r\n    testResult: \"\",\r\n    resultDate: \"\",\r\n    pcrLabSampleNumber: \"\",\r\n    approvalDate: \"\",\r\n    assayDate: \"\",\r\n    sampleTestable: \"\",\r\n    sampleStatus: \"\",\r\n    sampleID: \"\",\r\n    uuid: \"\",\r\n    visitDate: format(new Date(), \"yyyy-MM-dd\"),\r\n    transferStatus: \"\",\r\n    testedBy: \"\",\r\n    approvedBy: \"\",\r\n    dateTransferredOut: \"\",\r\n    reasonNotTested: \"\",\r\n    otherRejectionReason: \"\",\r\n    sendingPCRLabID: \"\",\r\n    sendingPCRLabName: \"\",\r\n  });\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const checkPCRLab = (name) => {\r\n    pcr_lab.forEach((val) => {\r\n      if (val.name === name) {\r\n        setPcrLabCode({ name: val.name, labNo: val.labNo });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { name, value } = event.target;\r\n    console.log(name, value);\r\n\r\n    if (name === \"sendingPCRLabName\") {\r\n      checkPCRLab(value);\r\n      console.log(pcrLabCode.labNo);\r\n    }\r\n\r\n    if (name === \"sampleStatus\" && value === \"2\") {\r\n      setReasonsNot(true);\r\n      setTransferredStatus(false);\r\n    }\r\n\r\n    if (name === \"sampleStatus\" && value === \"5\") {\r\n      setTransferredStatus(true);\r\n      setReasonsNot(false);\r\n    }\r\n\r\n    if (\r\n      (name === \"transferStatus\" && value === \"2\") ||\r\n      (name === \"transferStatus\" && value === \"3\") ||\r\n      (name === \"transferStatus\" && value === \"4\")\r\n    ) {\r\n      setTests(true);\r\n      setTransferredOut(true);\r\n    } else if (name === \"transferStatus\" && value === \"1\") {\r\n      setTests(false);\r\n      setTransferredOut(false);\r\n    }\r\n\r\n    if (name === \"reasonNotTested\" && value === \"7\") {\r\n      setReasons(true);\r\n    }\r\n\r\n    setInputFields({ ...inputFields, [name]: value });\r\n  };\r\n\r\n  const saveSample = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      console.log(inputFields);\r\n\r\n      await axios\r\n        .post(`${url}lims/results`, [inputFields], {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          console.log(\"results\", resp);\r\n\r\n          toast.success(\"PCR Sample results added successfully!!\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          setInputFields({\r\n            dateResultDispatched: \"\",\r\n            dateSampleReceivedAtPcrLab: \"\",\r\n            testResult: \"\",\r\n            resultDate: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            approvalDate: \"\",\r\n            assayDate: \"\",\r\n            sampleTestable: \"\",\r\n            sampleStatus: \"\",\r\n            sampleID: \"\",\r\n            uuid: \"\",\r\n            visitDate: format(new Date(), \"yyyy-MM-dd\"),\r\n          });\r\n        });\r\n      //history.push(\"/\");\r\n      props.togglestatus();\r\n      reload();\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while adding PCR Sample results\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form onSubmit={saveSample}>\r\n              <ModalHeader toggle={props.togglestatus}>\r\n                {sampleIDs\r\n                  .filter((key) => key.sampleID === inputFields.sampleID)\r\n                  .map((x) => (\r\n                    <Alert\r\n                      color=\"primary\"\r\n                      style={{ color: \"#000\", fontWeight: \"bolder\" }}\r\n                    >\r\n                      <p style={{ marginTop: \".7rem\" }}>\r\n                        Name:{\" \"}\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {x.firstName + \" \" + x.surName + \" \"}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Patient ID::\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.patientID[0].idNumber}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleType}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Date collected :\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleCollectionDate}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Sample collected By:\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleCollectedBy}\r\n                        </span>\r\n                      </p>\r\n                    </Alert>\r\n                  ))}\r\n              </ModalHeader>\r\n\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label\r\n                        for=\"dateResultDispatched\"\r\n                        className={classes.label}\r\n                      >\r\n                        Date Result Dispatched *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"dateResultDispatched\"\r\n                        id=\"dateResultDispatched\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.dateResultDispatched}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label\r\n                        for=\"dateSampleReceivedAtPcrLab\"\r\n                        className={classes.label}\r\n                      >\r\n                        Date Sample Received at PCR Lab *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"dateSampleReceivedAtPcrLab\"\r\n                        id=\"dateSampleReceivedAtPcrLab\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.dateSampleReceivedAtPcrLab}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"sampleID\" className={classes.label}>\r\n                        Sample ID *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleID\"\r\n                        id=\"sampleID\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleID}\r\n                      >\r\n                        <option hidden>Select Sample Id</option>\r\n                        {sampleIDs &&\r\n                          sampleIDs.map((sample, i) => (\r\n                            <option key={i} value={sample.sampleID}>\r\n                              {sample.sampleID}\r\n                            </option>\r\n                          ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"surName\" className={classes.label}>\r\n                        Sample Testable *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleTestable\"\r\n                        id=\"sampleTestable\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleTestable}\r\n                      >\r\n                        <option hidden>Is Sample Testable ?</option>\r\n                        <option value=\"true\">True</option>\r\n                        <option value=\"false\">False</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"approvedBy\" className={classes.label}>\r\n                        Approved By*\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"approvedBy\"\r\n                        id=\"approvedBy\"\r\n                        placeholder=\"approvedBy\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.approvedBy}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"approvalDate\" className={classes.label}>\r\n                        Approval Date *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"approvalDate\"\r\n                        id=\"approvalDate\"\r\n                        placeholder=\"Approval Date\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.approvalDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"sampleStatus\" className={classes.label}>\r\n                        Sample Status *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleStatus\"\r\n                        id=\"sampleStatus\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleStatus}\r\n                      >\r\n                        <option hidden>Select Sample status</option>\r\n                        <option value=\"1\">Completed</option>\r\n                        <option value=\"2\">Rejected</option>\r\n                        <option value=\"3\">In-Progress</option>\r\n                        <option value=\"4\">Re-run</option>\r\n                        <option value=\"5\">Transferred</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"pcrLabSampleNumber\" className={classes.label}>\r\n                        Pcr Lab Sample No *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"pcrLabSampleNumber\"\r\n                        id=\"pcrLabSampleNumber\"\r\n                        placeholder=\"Pcr Lab Sample Number\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.pcrLabSampleNumber}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  {transferredStatus ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"transferStatus\" className={classes.label}>\r\n                          Transfer Status\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"transferStatus\"\r\n                          id=\"transferStatus\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          onChange={(e) => handleChange(e)}\r\n                          value={inputFields.transferStatus}\r\n                        >\r\n                          <option hidden>Select transfer status</option>\r\n                          <option value=\"1\">Not Transferred</option>\r\n                          <option value=\"2\">Received</option>\r\n                          <option value=\"3\">In Process</option>\r\n                          <option value=\"4\">Tested</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {transferredOut === true ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"dateTransferredOut\"\r\n                          className={classes.label}\r\n                        >\r\n                          Date Transferred Out\r\n                        </Label>\r\n\r\n                        <Input\r\n                          type=\"date\"\r\n                          name=\"dateTransferredOut\"\r\n                          id=\"dateTransferredOut\"\r\n                          placeholder=\"Date Transferred Out\"\r\n                          max={new Date().toISOString().slice(0, 10)}\r\n                          className={classes.input}\r\n                          onChange={handleChange}\r\n                          value={inputFields.dateTransferredOut}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n\r\n                  {reasonsNot ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"reasonNotTested\" className={classes.label}>\r\n                          Reason Not Tested\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"reasonNotTested\"\r\n                          id=\"reasonNotTested\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          onChange={(e) => handleChange(e)}\r\n                          value={inputFields.reasonNotTested}\r\n                        >\r\n                          <option hidden>\r\n                            What is the reasons not tested?\r\n                          </option>\r\n                          <option value=\"1\">Testable</option>\r\n                          <option value=\"2\">Technical Problems</option>\r\n                          <option value=\"3\">Labeled Improperly</option>\r\n                          <option value=\"4\">Insufficient Blood</option>\r\n                          <option value=\"5\">Layered or clotted</option>\r\n                          <option value=\"6\">Improper Packaging</option>\r\n                          <option value=\"7\">Other Reasons</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Row>\r\n\r\n                <Row>\r\n                  {reasons === true ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"otherRejectionReason\"\r\n                          className={classes.label}\r\n                        >\r\n                          Other Rejection Reason\r\n                        </Label>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"otherRejectionReason\"\r\n                          id=\"otherRejectionReason\"\r\n                          placeholder=\"Other Rejection Reason\"\r\n                          className={classes.input}\r\n                          onChange={handleChange}\r\n                          value={inputFields.otherRejectionReason}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                </Row>\r\n\r\n                {tests === true ? (\r\n                  <Row>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"sendingPCRLabName\"\r\n                          className={classes.label}\r\n                        >\r\n                          Transferred PCR Lab Name\r\n                        </Label>\r\n\r\n                        <select\r\n                          className=\"form-control\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          name=\"sendingPCRLabName\"\r\n                          value={pcrLabCode.name}\r\n                          id=\"sendingPCRLabName\"\r\n                          onChange={(e) => handleChange(e)}\r\n                        >\r\n                          <option>Select PCR Lab</option>\r\n                          {pcr_lab.map((value, i) => (\r\n                            <option key={i} value={value.name}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"sendingPCRLabID\" className={classes.label}>\r\n                          Transferred PCR Lab ID\r\n                        </Label>\r\n                        &nbsp;&nbsp;\r\n                        <span>\r\n                          <b>\r\n                            {pcrLabCode.labNo\r\n                              ? \"Confirm PCR Id \" + pcrLabCode.labNo\r\n                              : \"\"}\r\n                          </b>\r\n                        </span>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"sendingPCRLabID\"\r\n                          id=\"sendingPCRLabID\"\r\n                          placeholder=\"Transferred PCR Lab ID\"\r\n                          value={inputFields.sendingPCRLabID}\r\n                          className={classes.input}\r\n                          onChange={(e) => handleChange(e)}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n\r\n                <Row>\r\n                  <Col>\r\n                    {\" \"}\r\n                    <FormGroup>\r\n                      <Label for=\"assayDate\" className={classes.label}>\r\n                        Assay Date *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"assayDate\"\r\n                        id=\"assayDate\"\r\n                        placeholder=\"Assay Date\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.assayDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"testedBy\" className={classes.label}>\r\n                        Test By *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"testedBy\"\r\n                        id=\"testedBy\"\r\n                        placeholder=\"Test By\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.testedBy}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"testResult\" className={classes.label}>\r\n                        Test result *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"testResult\"\r\n                        id=\"testResult\"\r\n                        placeholder=\"Test result\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.testResult}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"resultDate\" className={classes.label}>\r\n                        Result Date *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"resultDate\"\r\n                        id=\"resultDate\"\r\n                        placeholder=\"result Date\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.resultDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  disabled={loading}\r\n                >\r\n                  Save\r\n                </MatButton>\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={props.togglestatus}\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Cancel\r\n                </MatButton>\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddResultModal;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js",["134","135"],"import React, { useEffect, useCallback, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  MdModeEdit,\r\n} from \"react-icons/md\";\r\n\r\nimport SplitActionButton from \"../SampleCollection/SplitActionButton\";\r\n\r\nimport {\r\n  Badge,\r\n} from \"reactstrap\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport { forwardRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { FaEye } from \"react-icons/fa\";\r\n\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst DownloadManifest = (props) => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [config, setConfig] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const userPermission = () => {\r\n    axios\r\n      .get(`${url}account`, { headers: { Authorization: `Bearer ${token}` } })\r\n      .then((response) => {\r\n        //console.log(\"permission\", response.data.permissions)\r\n        setPermissions(response.data.permissions);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/configs`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setConfig(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(\"true\");\r\n    loadConfig();\r\n    userPermission();\r\n  }, [loadConfig]);\r\n\r\n  const actionItems = (row) => {\r\n    return [\r\n      {\r\n        name: \"View\",\r\n        type: \"link\",\r\n        icon: <FaEye size=\"22\" />,\r\n        to: {\r\n          pathname: \"/print-manifest\",\r\n          state: { sampleObj: row, permissions: permissions },\r\n        },\r\n      },\r\n      {\r\n        ...(row.manifestStatus === \"Ready\"\r\n          ? \" \"\r\n          : {\r\n              name: \" Results\",\r\n              type: \"link\",\r\n              icon: <FaEye size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n              to: {\r\n                pathname: \"/result\",\r\n                state: { manifestObj: row, permissions: permissions },\r\n              },\r\n            }),\r\n      },\r\n      {\r\n        ...(row.manifestStatus === \"Ready\"\r\n          ? \" \"\r\n          : {\r\n              name: \"Add RSL Result\",\r\n              type: \"link\",\r\n              icon: <MdModeEdit size=\"20\" color=\"rgb(4, 196, 217)\" />,\r\n              to: {\r\n                pathname: \"/add-result\",\r\n                state: { manifestObj: row, permissions: permissions },\r\n              },\r\n            }),\r\n      },\r\n    ];\r\n  };\r\n\r\n  const handlePulledData = (query) =>\r\n    new Promise((resolve, reject) => {\r\n      axios\r\n        .get(\r\n          `${url}lims/manifests?searchParam=${query.search}&pageNo=${query.page}&pageSize=${query.pageSize}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((resp) => resp)\r\n        .then((result) => {\r\n          if (result.data.records === null) {\r\n            resolve({\r\n              data: [],\r\n              page: 0,\r\n              totalCount: 0,\r\n            });\r\n          } else {\r\n            resolve({\r\n              data: result.data.records.map((row) => ({\r\n                manifestId: row.manifestID,\r\n                pickupDate: row.dateScheduledForPickup.replace(\"T\", \" \"),\r\n                createDate: row.createDate.replace(\"T\", \" \"),\r\n                lab: row.receivingLabName,\r\n                packaged_by: row.samplePackagedBy,\r\n                samples: row.sampleInformation.length,\r\n                results:\r\n                  row.results.length !== 0 ? (\r\n                    <Badge color=\"info\">{row.results.length}</Badge>\r\n                  ) : (\r\n                    0\r\n                  ),\r\n                status:\r\n                  row.manifestStatus === \"Ready\" ? (\r\n                    <Badge color=\"secondary\">Not Submitted</Badge>\r\n                  ) : (\r\n                    <Badge color=\"success\">{row.manifestStatus}</Badge>\r\n                  ),\r\n                actions: (\r\n                  <>\r\n                    <SplitActionButton actions={actionItems(row)} />\r\n                  </>\r\n                ),\r\n              })),\r\n              page: query.page,\r\n              totalCount: result.data.totalRecords,\r\n            });\r\n          }\r\n        });\r\n    });\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page + 1);\r\n  };\r\n\r\n  const localization = {\r\n    pagination: {\r\n      labelDisplayedRows: `Page: ${currentPage}`,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title=\"Previous Manifests\"\r\n          columns={[\r\n            { title: \"Manifest Id\", field: \"manifestId\" },\r\n            { title: \"Pickup Date\", field: \"pickupDate\" },\r\n            { title: \"Created Date\", field: \"createDate\" },\r\n            { title: \"Receiving Lab\", field: \"lab\" },\r\n            { title: \"Packaged By\", field: \"packaged_by\" },\r\n            { title: \"Total Samples\", field: \"samples\" },\r\n            { title: \"Total Results\", field: \"results\" },\r\n            { title: \"Status\", field: \"status\" },\r\n            { title: \"Action\", field: \"actions\" },\r\n          ]}\r\n          isLoading={loading}\r\n          data={handlePulledData}\r\n          options={{\r\n            headerStyle: {\r\n              backgroundColor: \"#014d88\",\r\n              color: \"#fff\",\r\n              fontSize: \"16px\",\r\n              padding: \"10px\",\r\n            },\r\n            searchFieldStyle: {\r\n              width: \"200%\",\r\n              margingLeft: \"250px\",\r\n            },\r\n            selection: false,\r\n            filtering: false,\r\n            exportButton: false,\r\n            searchFieldAlignment: \"left\",\r\n            pageSizeOptions: [10, 20, 100],\r\n            pageSize: 10,\r\n            debounceInterval: 400,\r\n          }}\r\n          onChangePage={handleChangePage}\r\n          localization={localization}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DownloadManifest;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js",["136","137"],{"ruleId":"138","severity":1,"message":"139","line":4,"column":41,"nodeType":"140","messageId":"141","endLine":4,"endColumn":47},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"138","severity":1,"message":"146","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":20},{"ruleId":"138","severity":1,"message":"147","line":7,"column":10,"nodeType":"140","messageId":"141","endLine":7,"endColumn":16},{"ruleId":"138","severity":1,"message":"146","line":35,"column":10,"nodeType":"140","messageId":"141","endLine":35,"endColumn":20},{"ruleId":"148","severity":1,"message":"149","line":196,"column":6,"nodeType":"150","endLine":196,"endColumn":23,"suggestions":"151"},{"ruleId":"138","severity":1,"message":"152","line":208,"column":9,"nodeType":"140","messageId":"141","endLine":208,"endColumn":22},{"ruleId":"153","severity":1,"message":"154","line":208,"column":49,"nodeType":"155","messageId":"156","endLine":208,"endColumn":51},{"ruleId":"157","severity":1,"message":"158","line":222,"column":9,"nodeType":"159","messageId":"160","endLine":222,"endColumn":12},{"ruleId":"138","severity":1,"message":"161","line":21,"column":25,"nodeType":"140","messageId":"141","endLine":21,"endColumn":41},{"ruleId":"138","severity":1,"message":"162","line":94,"column":10,"nodeType":"140","messageId":"141","endLine":94,"endColumn":17},{"ruleId":"138","severity":1,"message":"163","line":90,"column":10,"nodeType":"140","messageId":"141","endLine":90,"endColumn":17},{"ruleId":"138","severity":1,"message":"164","line":91,"column":9,"nodeType":"140","messageId":"141","endLine":91,"endColumn":18},{"ruleId":"138","severity":1,"message":"165","line":118,"column":13,"nodeType":"140","messageId":"141","endLine":118,"endColumn":17},{"ruleId":"138","severity":1,"message":"166","line":1,"column":8,"nodeType":"140","messageId":"141","endLine":1,"endColumn":17},{"ruleId":"138","severity":1,"message":"167","line":84,"column":17,"nodeType":"140","messageId":"141","endLine":84,"endColumn":25},{"ruleId":"138","severity":1,"message":"168","line":86,"column":16,"nodeType":"140","messageId":"141","endLine":86,"endColumn":23},{"ruleId":"148","severity":1,"message":"169","line":109,"column":6,"nodeType":"150","endLine":109,"endColumn":8,"suggestions":"170"},{"ruleId":"138","severity":1,"message":"162","line":96,"column":10,"nodeType":"140","messageId":"141","endLine":96,"endColumn":17},{"ruleId":"138","severity":1,"message":"171","line":98,"column":10,"nodeType":"140","messageId":"141","endLine":98,"endColumn":16},{"ruleId":"138","severity":1,"message":"172","line":108,"column":19,"nodeType":"140","messageId":"141","endLine":108,"endColumn":29},{"ruleId":"138","severity":1,"message":"163","line":109,"column":10,"nodeType":"140","messageId":"141","endLine":109,"endColumn":17},{"ruleId":"138","severity":1,"message":"164","line":110,"column":9,"nodeType":"140","messageId":"141","endLine":110,"endColumn":18},{"ruleId":"138","severity":1,"message":"173","line":108,"column":9,"nodeType":"140","messageId":"141","endLine":108,"endColumn":16},{"ruleId":"138","severity":1,"message":"174","line":111,"column":10,"nodeType":"140","messageId":"141","endLine":111,"endColumn":16},{"ruleId":"138","severity":1,"message":"172","line":58,"column":21,"nodeType":"140","messageId":"141","endLine":58,"endColumn":31},{"ruleId":"138","severity":1,"message":"175","line":77,"column":11,"nodeType":"140","messageId":"141","endLine":77,"endColumn":23},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["176"],"no-negated-in-lhs",["177"],"'makeStyles' is defined but never used.","'labObj' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadConfig', 'loadManifestData', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["178"],"'uniqueSamples' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'age'.","ObjectExpression","unexpected","'setSelectedIndex' is assigned a value but never used.","'loading' is assigned a value but never used.","'visible' is assigned a value but never used.","'onDismiss' is assigned a value but never used.","'name' is assigned a value but never used.","'PropTypes' is defined but never used.","'setSaved' is assigned a value but never used.","'setSend' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sampleObj'. Either include it or remove the dependency array.",["179"],"'logins' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'classes' is assigned a value but never used.","'config' is assigned a value but never used.","'sampleStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [loadConfig, loadLabTestData, loadManifestData, props]",{"range":"184","text":"185"},"Update the dependencies array to be: [sampleObj]",{"range":"186","text":"187"},[8277,8294],"[loadConfig, loadLabTestData, loadManifestData, props]",[2772,2774],"[sampleObj]"]
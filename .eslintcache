[{"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\index.js":"1","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\App.js":"2","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"7","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"8","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\api.js":"9","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"10","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"11","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"12","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js":"13","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js":"14","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js":"15","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js":"16","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\Result.js":"17","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js":"18","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js":"19","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js":"20","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js":"21","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js":"22","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js":"23","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js":"24","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResult.js":"25","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResultPrint.js":"26"},{"size":672,"mtime":1672751849507,"results":"27","hashOfConfig":"28"},{"size":1439,"mtime":1673963458073,"results":"29","hashOfConfig":"28"},{"size":375,"mtime":1663251978370,"results":"30","hashOfConfig":"28"},{"size":9235,"mtime":1663251975986,"results":"31","hashOfConfig":"28"},{"size":3056,"mtime":1663251975987,"results":"32","hashOfConfig":"28"},{"size":3107,"mtime":1673969369477,"results":"33","hashOfConfig":"28"},{"size":3683,"mtime":1672838309160,"results":"34","hashOfConfig":"28"},{"size":16065,"mtime":1673969441482,"results":"35","hashOfConfig":"28"},{"size":482,"mtime":1673969576836,"results":"36","hashOfConfig":"28"},{"size":9166,"mtime":1663251978365,"results":"37","hashOfConfig":"28"},{"size":101260,"mtime":1667224183218,"results":"38","hashOfConfig":"28"},{"size":4318,"mtime":1672838093759,"results":"39","hashOfConfig":"28"},{"size":13451,"mtime":1673275792881,"results":"40","hashOfConfig":"28"},{"size":9013,"mtime":1673275027307,"results":"41","hashOfConfig":"28"},{"size":640,"mtime":1672752555620,"results":"42","hashOfConfig":"28"},{"size":6062,"mtime":1672757819560,"results":"43","hashOfConfig":"28"},{"size":8148,"mtime":1673969465127,"results":"44","hashOfConfig":"28"},{"size":32963,"mtime":1672756500336,"results":"45","hashOfConfig":"28"},{"size":4084,"mtime":1672758031102,"results":"46","hashOfConfig":"28"},{"size":26372,"mtime":1672757126807,"results":"47","hashOfConfig":"28"},{"size":9204,"mtime":1673944690792,"results":"48","hashOfConfig":"28"},{"size":4930,"mtime":1673967489745,"results":"49","hashOfConfig":"28"},{"size":16158,"mtime":1672758873237,"results":"50","hashOfConfig":"28"},{"size":9078,"mtime":1673958406916,"results":"51","hashOfConfig":"28"},{"size":4567,"mtime":1673968731799,"results":"52","hashOfConfig":"28"},{"size":3243,"mtime":1673969355152,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"pjo1dr",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"57"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"57"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"57"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"57"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\index.js",["114"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router } from \"react-router-dom\";\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport ThemeContext from \"./../src/main/webapp/context/ThemeContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SimpleReactLightbox>\r\n      <BrowserRouter basename=\"/\">\r\n        <ThemeContext>\r\n          <App />\r\n        </ThemeContext>\r\n      </BrowserRouter>\r\n    </SimpleReactLightbox>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["115","116"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\App.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js",["117","118"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["119","120","121","122","123"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\api.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["124"],"import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\r\nimport Grow from \"@mui/material/Grow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Popper from \"@mui/material/Popper\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport MenuList from \"@mui/material/MenuList\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst options = [\"Delete\", \"Edit\"];\r\n\r\nexport default function SplitActionButton(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup\r\n        variant=\"contained\"\r\n        ref={anchorRef}\r\n        style={{\r\n          backgroundColor: \"rgb(153, 46, 98)\",\r\n          height: \"30px\",\r\n          width: \"150px\",\r\n        }}\r\n      >\r\n        <Link\r\n          to={props.actions[0].to}\r\n          style={{ borderRight: \"20px solid #fff !important\" }}\r\n        >\r\n          <Button\r\n            size=\"small\"\r\n            onClick={handleClick}\r\n            variant=\"contained\"\r\n            startIcon={props.actions[0].icon}\r\n            style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n          >\r\n            <Typography variant=\"h7\" style={{ fontWeight: \"bolder\" }}>\r\n              {props.actions[0].name}\r\n            </Typography>\r\n          </Button>\r\n        </Link>\r\n\r\n        <Divider\r\n          orientation=\"vertical\"\r\n          flexItem\r\n          style={{\r\n            borderRight: \"20px solid #fff !important\",\r\n            backgroundColor: \"#fff\",\r\n            width: \"1px\",\r\n            height: \"26px\",\r\n            marginTop: \"2px\",\r\n          }}\r\n        >\r\n          1\r\n        </Divider>\r\n        <Button\r\n          size=\"medium\"\r\n          aria-controls={open ? \"split-button-menu\" : undefined}\r\n          aria-expanded={open ? \"true\" : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n          style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n        >\r\n          <FaCaretDown size=\"24\" />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n        style={{ zIndex: \"10000\" }}\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n              zIndex: \"1000\",\r\n            }}\r\n          >\r\n            {/*width: 130,*/}\r\n            <Paper\r\n              sx={{\r\n                minWidth: \"130px\",\r\n                maxWidth: \"150px\",\r\n                marginTop: \"2px\",\r\n                zIndex: \"1000\",\r\n              }}\r\n            >\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                  {props.actions.slice(1).map((option, index) => (\r\n                    <MenuItem key={Math.random()}>\r\n                      <Link to={option.to}>\r\n                        {option.icon}\r\n                        <span\r\n                          style={{\r\n                            color: \"rgb(153, 46, 98)\",\r\n                            fontWeight: \"bolder\",\r\n                            fontSize: \"12px\",\r\n                          }}\r\n                        >\r\n                          {option.name}\r\n                        </span>\r\n                      </Link>\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js",["125"],"import React, {\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from \"reactstrap\";\r\n\r\nimport \"./sample.css\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { token, url } from \"../../../api\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Login = (props) => {\r\n  let history = useHistory();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [demo, setDemo] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(true);\r\n  const [login, setLogin] = useState({\r\n    configName: \"\",\r\n    serverUrl: \"\",\r\n    configEmail: \"\",\r\n    configPassword: \"\",\r\n    testFacilityDATIMCode: \"\",\r\n    testFacilityName: \"\",\r\n  });\r\n\r\n  const [logins, setLogins] = useState({});\r\n\r\n  const loadServerDetails = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      //console.log(\"configs\", response);\r\n      setLogins(response.data);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadServerDetails();\r\n  }, [loadServerDetails]);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    //console.log(name, value)\r\n    if (name === \"configName\" && value === \"Server\") {\r\n      setDemo(true);\r\n    } else if (name === \"configName\" && value === \"Live Server\") {\r\n      setDemo(false);\r\n    }\r\n    setLogin({ ...login, [name]: value });\r\n  };\r\n\r\n  const validateInputs = () => {\r\n    let temp = { ...errors };\r\n    temp.configName = login.configName ? \"\" : \"Server Name is required.\";\r\n    temp.serverUrl = login.serverUrl ? \"\" : \"Server URL is required.\";\r\n    temp.configEmail = login.configEmail ? \"\" : \"Email is required.\";\r\n    temp.configPassword = login.configPassword\r\n      ? \"\"\r\n      : \"Configuration password URL is required.\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (validateInputs()) {\r\n        await axios\r\n          .post(`${url}lims/config`, login, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((resp) => {\r\n            console.log(\"login details\", resp);\r\n\r\n            toast.success(\"LIMS Credentials saved successfully!!\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n\r\n            setLogin({\r\n              configName: \"\",\r\n              serverUrl: \"\",\r\n              configEmail: \"\",\r\n              configPassword: \"\",\r\n              facilityId: \"\",\r\n              receivingPCRLabId: \"\",\r\n            });\r\n          });\r\n\r\n          loadServerDetails();\r\n      }\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while saving LIMS Credentials\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const deleteConfig = async (e, id) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.delete(`${url}lims/configs/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      console.log(\" delete config\", response);\r\n      loadServerDetails();\r\n      toast.success(\"LIMS Credentials deleted successfully!!\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while deleting a config\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <hr />\r\n          {\r\n            <>\r\n              <Alert\r\n                style={{\r\n                  width: \"100%\",\r\n                  fontSize: \"16px\",\r\n                  backgroundColor: \"#014d88\",\r\n                  color: \"#fff\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Alert.Heading>LIMS Configuration Details</Alert.Heading>\r\n              </Alert>\r\n\r\n              <Row>\r\n                <Col xs={6} md={4}>\r\n                  <Form>\r\n                    <FormGroup>\r\n                      <Label for=\"configName\" className={classes.label}>\r\n                        Server Name\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        name=\"configName\"\r\n                        value={login.configName}\r\n                        id=\"configName\"\r\n                        onChange={handleChange}\r\n                      >\r\n                        <option hidden>Select Configuration Server</option>\r\n                        <option value=\"Server\">LIMS Server</option>\r\n                        {/* <option value=\"Live Server\">Live Server</option> */}\r\n                      </select>\r\n\r\n                      {errors.configName !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configName}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"serverUrl\" className={classes.label}>\r\n                        URL\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"serverUrl\"\r\n                        id=\"serverUrl\"\r\n                        placeholder=\"Server URL\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.serverUrl}\r\n                      />\r\n                      {errors.serverUrl !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.serverUrl}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <Label for=\"configEmail\" className={classes.label}>\r\n                        Email\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"configEmail\"\r\n                        id=\"configEmail\"\r\n                        placeholder=\"E-Mail\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.configEmail}\r\n                      />\r\n                      {errors.configEmail !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configEmail}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                      <Label for=\"configPassword\" className={classes.label}>\r\n                        Password\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"password\"\r\n                        name=\"configPassword\"\r\n                        id=\"configPassword\"\r\n                        placeholder=\"configuration password\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={login.configPassword}\r\n                      />\r\n\r\n                      {errors.configPassword !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.configPassword}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    {demo === true ? (\r\n                      <>\r\n                        <FormGroup>\r\n                          <Label\r\n                            for=\"testFacilityDATIMCode\"\r\n                            className={classes.label}\r\n                          >\r\n                            Testing Facility Datim Code\r\n                          </Label>\r\n\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"testFacilityDATIMCode\"\r\n                            id=\"testFacilityDATIMCode\"\r\n                            placeholder=\"Testing Facility Datim Code\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                            value={login.testFacilityDATIMCode}\r\n                          />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                          <Label\r\n                            for=\"testFacilityName\"\r\n                            className={classes.label}\r\n                          >\r\n                            Testing Facility Name\r\n                          </Label>\r\n\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"testFacilityName\"\r\n                            id=\"testFacilityName\"\r\n                            placeholder=\"Testing Facility Name\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                            value={login.testFacilityName}\r\n                          />\r\n                        </FormGroup>\r\n                      </>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      startIcon={<SaveIcon />}\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Form>\r\n                </Col>\r\n                <Col xs={6} md={8}>\r\n                  <Table bordered size=\"sm\" responsive>\r\n                    <thead\r\n                      style={{\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                        textAlign: \"center\",\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th>S/N</th>\r\n                        <th>Server Name</th>\r\n                        <th>URL</th>\r\n                        <th>Email</th>\r\n                        {/*<th>Created Date</th>*/}\r\n                        <th>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody style={{ textAlign: \"center\" }}>\r\n                          <tr key={logins.id}>\r\n                            <td>{logins.id}</td>\r\n                            <td>{logins.configName}</td>\r\n                            <td>{logins.serverUrl}</td>\r\n                            <td>{logins.configEmail}</td>\r\n                            {/*<td>09/09/2022</td>*/}\r\n                            <td>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"error\"\r\n                                startIcon={<DeleteIcon />}\r\n                                onClick={(e) => deleteConfig(e, logins.id)}\r\n                              ></Button>\r\n                            </td>\r\n                          </tr>\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          }\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js",["126","127","128","129"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst ConfigModal = (props) => {\r\n  const { manifestsId } = props;\r\n\r\n  const classes = useStyles();\r\n  const [saved, setSaved] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  const [logins, setLogins] = useState({});\r\n\r\n  const [configId, setConfigId] = useState(0);\r\n\r\n  const loadConfig = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(`${url}lims/config`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setLogins(response.data);\r\n      localStorage.setItem(\"configId\", JSON.stringify(response.data.id));\r\n      setLoading(false);\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while fetching config details\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n  }, [loadConfig]);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setConfigId(parseInt(value));\r\n    setSaved(true);\r\n  };\r\n\r\n  const saveSample = async (e) => {\r\n    e.preventDefault();\r\n    //console.log(configId)\r\n    //setSaved(true);\r\n    toast.success(\"Sample manifest saved successfully!!\", {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n    });\r\n\r\n    props.togglestatus();\r\n  };\r\n\r\n  const sendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const timer = setInterval(() => {\r\n      props.handleProgress((prevProgress) =>\r\n        prevProgress >= 100 ? 100 : prevProgress + 2\r\n      );\r\n    }, 500);\r\n\r\n    const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n    props.togglestatus();\r\n    try {\r\n      await axios\r\n        .get(`${url}lims/ready-manifests/${manifestsId}/${serverId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          if (resp) {\r\n            console.log(\"sending manifest\", resp);\r\n            props.handleProgress(100);\r\n\r\n            toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n              position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          clearInterval(timer);\r\n          console.log(\"err\", err);\r\n          toast.error(\"Poor Internet Connection....\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          props.handleOpen();\r\n        });\r\n    } catch (err) {\r\n      props.setFailed(true);\r\n\r\n      clearInterval(timer);\r\n      toast.error(\"Error encountered while sending manifest\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n\r\n      props.handleOpen();\r\n    }\r\n  };\r\n\r\n  const resendManifest = async (e) => {\r\n    e.preventDefault();\r\n\r\n    props.handleProgress(20);\r\n    const serverId = JSON.parse(localStorage.getItem(\"configId\"));\r\n\r\n    try {\r\n      props.handleProgress(50);\r\n      await axios\r\n        .get(`${url}lims/ready-manifests/${manifestsId}/${serverId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          props.handleProgress(70);\r\n\r\n          if (resp) {\r\n            console.log(\"re sending manifest\", resp);\r\n            props.handleProgress(100);\r\n          }\r\n\r\n          toast.success(\"Sample manifest sent successfully to PCR Lab.\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          props.handleProgress(10);\r\n\r\n          toast.success(\"Server currently down!!! Try sending manifest later\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          props.handleProgress(0);\r\n          props.handleOpen();\r\n        });\r\n    } catch (err) {\r\n      props.handleProgress(10);\r\n      toast.error(\"Error encountered while sending manifest\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n      props.handleOpen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form onSubmit={saveSample}>\r\n              <ModalHeader toggle={props.togglestatus}></ModalHeader>\r\n              <ModalBody>\r\n                {props.failed ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup>\r\n                          <Label for=\"configName\" className={classes.label}>\r\n                            Which PCR Server are you sending to?\r\n                          </Label>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"config\"\r\n                            id=\"config\"\r\n                            className={classes.input}\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option hidden>Select Server</option>\r\n                            {\r\n                              <option key={1} value={logins.id}>\r\n                                {logins.configName}\r\n                              </option>\r\n                            }\r\n                          </Input>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col></Col>\r\n                    </Row>\r\n\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      startIcon={<SendIcon />}\r\n                      type=\"submit\"\r\n                      onClick={sendManifest}\r\n                      disabled={saved ? false : true}\r\n                    >\r\n                      Send\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n\r\n                {!props.failed ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      disabled={loading}\r\n                      onClick={saveSample}\r\n                    >\r\n                      Save\r\n                    </MatButton>{\" \"}\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      startIcon={<SendIcon />}\r\n                      type=\"submit\"\r\n                      onClick={resendManifest}\r\n                    >\r\n                      Re-send\r\n                    </MatButton>{\" \"}\r\n                    <MatButton\r\n                      variant=\"contained\"\r\n                      color=\"default\"\r\n                      onClick={props.togglestatus}\r\n                      className={classes.button}\r\n                      startIcon={<CancelIcon />}\r\n                    >\r\n                      Cancel\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigModal;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Progressbar.js",["130"],"import PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst ProgressBar = (props) => {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\PrintManifest.js",["131","132","133"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport ProgressBar from \"../SampleCollection/Progressbar\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport \"../SampleCollection/sample.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ManifestPrint from \"./ManifestPrint\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport PrintIcon from \"@mui/icons-material/Print\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport ConfigModal from \"../SampleCollection/ConfigModal\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"16px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"16px\",\r\n    color: \"rgb(153, 46, 98)\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst PrintManifest = (props) => {\r\n  let history = useHistory();\r\n  const sampleObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.sampleObj\r\n      : {};\r\n  //console.log(\"props\",sampleObj)\r\n  const classes = useStyles();\r\n\r\n  const [saved, setSaved] = useState(false);\r\n  const [localStore, SetLocalStore] = useState([]);\r\n  const [send, setSend] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [failed, setFailed] = useState(false);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const toggleModal = () => setOpen(!open);\r\n\r\n  const componentRef = useRef();\r\n  const handlePrint = useReactToPrint({\r\n    content: () => componentRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const manifests = JSON.parse(localStorage.getItem(\"manifest\"));\r\n    if (manifests) {\r\n      SetLocalStore(manifests);\r\n      localStorage.removeItem(\"manifest\");\r\n    } else {\r\n      SetLocalStore(sampleObj);\r\n    }\r\n  }, []);\r\n\r\n  const sendManifest = async (e) => {\r\n    e.preventDefault();\r\n    handleOpen();\r\n    setProgress(10);\r\n  };\r\n\r\n  const handleProgress = (progessCount) => {\r\n    setProgress(progessCount);\r\n  };\r\n\r\n  const handleFailure = (status) => {\r\n    setFailed(!failed);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Card.Body>\r\n          {Object.keys(localStore).length === 0 ? (\r\n            <Alert\r\n              variant=\"danger\"\r\n              style={{ width: \"100%\", fontSize: \"18px\", textAlign: \"center\" }}\r\n            >\r\n              <b>Sample Manifest</b> not created yet. pls complete the manifest\r\n              form.\r\n            </Alert>\r\n          ) : (\r\n            <>\r\n              <p style={{ textAlign: \"right\" }}>\r\n                {localStore.manifestStatus === \"Ready\" ? (\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"success\"\r\n                    className={classes.button}\r\n                    startIcon={<SendIcon />}\r\n                    disabled={!send ? false : true}\r\n                    onClick={sendManifest}\r\n                  >\r\n                    Send Manifest\r\n                  </MatButton>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"success\"\r\n                  className={classes.button}\r\n                  startIcon={<PrintIcon />}\r\n                  disabled={!send ? false : true}\r\n                  onClick={handlePrint}\r\n                >\r\n                  Print\r\n                </MatButton>\r\n\r\n                <Link color=\"inherit\" to={{ pathname: \"/\" }}>\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<HomeIcon />}\r\n                  >\r\n                    back Home\r\n                  </MatButton>\r\n                </Link>\r\n                <Link\r\n                  color=\"inherit\"\r\n                  to={{\r\n                    pathname: \"/result\",\r\n                    state: { manifestObj: localStore },\r\n                  }}\r\n                >\r\n                  <MatButton\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    startIcon={<HomeIcon />}\r\n                  >\r\n                    Results\r\n                  </MatButton>\r\n                </Link>\r\n              </p>\r\n              {progress !== 0 ? (\r\n                <>\r\n                  <span>Sending manifest to PCR Lab</span>\r\n                  <ProgressBar value={progress} />\r\n                </>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <ManifestPrint sampleObj={localStore} ref={componentRef} />\r\n            </>\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n      {open ? (\r\n        <ConfigModal\r\n          modalstatus={open}\r\n          togglestatus={toggleModal}\r\n          manifestsId={sampleObj.id}\r\n          saved={saved}\r\n          handleProgress={handleProgress}\r\n          handleFailure={handleFailure}\r\n        />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrintManifest;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\Result.js",["134"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResults.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestPrint.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\AddResultModal.js",["135","136","137"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  Row,\r\n  Alert,\r\n  Col,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { format } from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { token, url } from \"../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { pcr_lab } from \"../SampleCollection/pcr\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    border: \"1px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"14px\",\r\n    color: \"#000\",\r\n  },\r\n  arial: {\r\n    border: \"2px solid #014d88\",\r\n    borderRadius: \"0px\",\r\n    fontSize: \"15px\",\r\n    color: \"#000\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n  inputGroupText: {\r\n    backgroundColor: \"#014d88\",\r\n    fontWeight: \"bolder\",\r\n    color: \"#fff\",\r\n    borderRadius: \"0px\",\r\n  },\r\n  label: {\r\n    fontSize: \"14px\",\r\n    color: \"#014d88\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  modalStyle1: {\r\n    position: \"absolute\",\r\n    overflow: \"scroll\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst AddResultModal = (props) => {\r\n  const classes = useStyles();\r\n  const { manifestObj, reload } = props;\r\n  //console.log(\"main\", manifestObj)\r\n\r\n  const sampleIDs = [];\r\n  manifestObj.sampleInformation.forEach((e) => {\r\n    sampleIDs.push(e);\r\n  });\r\n\r\n  const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\" });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(true);\r\n  const onDismiss = () => setVisible(false);\r\n\r\n  const [tests, setTests] = useState(false);\r\n  const [transferredOut, setTransferredOut] = useState(false);\r\n  const [reasons, setReasons] = useState(false);\r\n  const [reasonsNot, setReasonsNot] = useState(false);\r\n  const [transferredStatus, setTransferredStatus] = useState(false);\r\n  const [inputFields, setInputFields] = useState({\r\n    manifestRecordID: manifestObj.id,\r\n    //id: 0,\r\n    dateResultDispatched: \"\",\r\n    dateSampleReceivedAtPcrLab: \"\",\r\n    testResult: \"\",\r\n    resultDate: \"\",\r\n    pcrLabSampleNumber: \"\",\r\n    approvalDate: \"\",\r\n    assayDate: \"\",\r\n    sampleTestable: \"\",\r\n    sampleStatus: \"\",\r\n    sampleID: \"\",\r\n    uuid: \"\",\r\n    visitDate: format(new Date(), \"yyyy-MM-dd\"),\r\n    transferStatus: \"\",\r\n    testedBy: \"\",\r\n    approvedBy: \"\",\r\n    dateTransferredOut: \"\",\r\n    reasonNotTested: \"\",\r\n    otherRejectionReason: \"\",\r\n    sendingPCRLabID: \"\",\r\n    sendingPCRLabName: \"\",\r\n  });\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const checkPCRLab = (name) => {\r\n    pcr_lab.forEach((val) => {\r\n      if (val.name === name) {\r\n        setPcrLabCode({ name: val.name, labNo: val.labNo });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { name, value } = event.target;\r\n    console.log(name, value);\r\n\r\n    if (name === \"sendingPCRLabName\") {\r\n      checkPCRLab(value);\r\n      console.log(pcrLabCode.labNo);\r\n    }\r\n\r\n    if (name === \"sampleStatus\" && value === \"2\") {\r\n      setReasonsNot(true);\r\n      setTransferredStatus(false);\r\n    }\r\n\r\n    if (name === \"sampleStatus\" && value === \"5\") {\r\n      setTransferredStatus(true);\r\n      setReasonsNot(false);\r\n    }\r\n\r\n    if (\r\n      (name === \"transferStatus\" && value === \"2\") ||\r\n      (name === \"transferStatus\" && value === \"3\") ||\r\n      (name === \"transferStatus\" && value === \"4\")\r\n    ) {\r\n      setTests(true);\r\n      setTransferredOut(true);\r\n    } else if (name === \"transferStatus\" && value === \"1\") {\r\n      setTests(false);\r\n      setTransferredOut(false);\r\n    }\r\n\r\n    if (name === \"reasonNotTested\" && value === \"7\") {\r\n      setReasons(true);\r\n    }\r\n\r\n    setInputFields({ ...inputFields, [name]: value });\r\n  };\r\n\r\n  const saveSample = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      console.log(inputFields);\r\n\r\n      await axios\r\n        .post(`${url}lims/results`, [inputFields], {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n          console.log(\"results\", resp);\r\n\r\n          toast.success(\"PCR Sample results added successfully!!\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n          });\r\n\r\n          setInputFields({\r\n            dateResultDispatched: \"\",\r\n            dateSampleReceivedAtPcrLab: \"\",\r\n            testResult: \"\",\r\n            resultDate: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            approvalDate: \"\",\r\n            assayDate: \"\",\r\n            sampleTestable: \"\",\r\n            sampleStatus: \"\",\r\n            sampleID: \"\",\r\n            uuid: \"\",\r\n            visitDate: format(new Date(), \"yyyy-MM-dd\"),\r\n          });\r\n        });\r\n      //history.push(\"/\");\r\n      props.togglestatus();\r\n      reload();\r\n    } catch (e) {\r\n      toast.error(\"An error occurred while adding PCR Sample results\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <Modal\r\n            isOpen={props.modalstatus}\r\n            toggle={props.togglestatus}\r\n            className={props.className}\r\n            size=\"lg\"\r\n          >\r\n            <Form onSubmit={saveSample}>\r\n              <ModalHeader toggle={props.togglestatus}>\r\n                {sampleIDs\r\n                  .filter((key) => key.sampleID === inputFields.sampleID)\r\n                  .map((x) => (\r\n                    <Alert\r\n                      color=\"primary\"\r\n                      style={{ color: \"#000\", fontWeight: \"bolder\" }}\r\n                    >\r\n                      <p style={{ marginTop: \".7rem\" }}>\r\n                        Name:{\" \"}\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {x.firstName + \" \" + x.surName + \" \"}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Patient ID::\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.patientID[0].idNumber}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleType}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Date collected :\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleCollectionDate}\r\n                        </span>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp; Sample collected By:\r\n                        <span style={{ fontWeight: \"bolder\" }}>\r\n                          {\" \"}\r\n                          {x.sampleCollectedBy}\r\n                        </span>\r\n                      </p>\r\n                    </Alert>\r\n                  ))}\r\n              </ModalHeader>\r\n\r\n              <ModalBody>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label\r\n                        for=\"dateResultDispatched\"\r\n                        className={classes.label}\r\n                      >\r\n                        Date Result Dispatched *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"dateResultDispatched\"\r\n                        id=\"dateResultDispatched\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.dateResultDispatched}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label\r\n                        for=\"dateSampleReceivedAtPcrLab\"\r\n                        className={classes.label}\r\n                      >\r\n                        Date Sample Received at PCR Lab *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"dateSampleReceivedAtPcrLab\"\r\n                        id=\"dateSampleReceivedAtPcrLab\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.dateSampleReceivedAtPcrLab}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"sampleID\" className={classes.label}>\r\n                        Sample ID *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleID\"\r\n                        id=\"sampleID\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleID}\r\n                      >\r\n                        <option hidden>Select Sample Id</option>\r\n                        {sampleIDs &&\r\n                          sampleIDs.map((sample, i) => (\r\n                            <option key={i} value={sample.sampleID}>\r\n                              {sample.sampleID}\r\n                            </option>\r\n                          ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"surName\" className={classes.label}>\r\n                        Sample Testable *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleTestable\"\r\n                        id=\"sampleTestable\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleTestable}\r\n                      >\r\n                        <option hidden>Is Sample Testable ?</option>\r\n                        <option value=\"true\">True</option>\r\n                        <option value=\"false\">False</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"approvedBy\" className={classes.label}>\r\n                        Approved By*\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"approvedBy\"\r\n                        id=\"approvedBy\"\r\n                        placeholder=\"approvedBy\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.approvedBy}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"approvalDate\" className={classes.label}>\r\n                        Approval Date *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"approvalDate\"\r\n                        id=\"approvalDate\"\r\n                        placeholder=\"Approval Date\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.approvalDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"sampleStatus\" className={classes.label}>\r\n                        Sample Status *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sampleStatus\"\r\n                        id=\"sampleStatus\"\r\n                        style={{\r\n                          border: \"1px solid #014d88\",\r\n                          borderRadius: \"0px\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#000\",\r\n                        }}\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={inputFields.sampleStatus}\r\n                      >\r\n                        <option hidden>Select Sample status</option>\r\n                        <option value=\"1\">Completed</option>\r\n                        <option value=\"2\">Rejected</option>\r\n                        <option value=\"3\">In-Progress</option>\r\n                        <option value=\"4\">Re-run</option>\r\n                        <option value=\"5\">Transferred</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"pcrLabSampleNumber\" className={classes.label}>\r\n                        Pcr Lab Sample No *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"pcrLabSampleNumber\"\r\n                        id=\"pcrLabSampleNumber\"\r\n                        placeholder=\"Pcr Lab Sample Number\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.pcrLabSampleNumber}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  {transferredStatus ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"transferStatus\" className={classes.label}>\r\n                          Transfer Status\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"transferStatus\"\r\n                          id=\"transferStatus\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          onChange={(e) => handleChange(e)}\r\n                          value={inputFields.transferStatus}\r\n                        >\r\n                          <option hidden>Select transfer status</option>\r\n                          <option value=\"1\">Not Transferred</option>\r\n                          <option value=\"2\">Received</option>\r\n                          <option value=\"3\">In Process</option>\r\n                          <option value=\"4\">Tested</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {transferredOut === true ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"dateTransferredOut\"\r\n                          className={classes.label}\r\n                        >\r\n                          Date Transferred Out\r\n                        </Label>\r\n\r\n                        <Input\r\n                          type=\"date\"\r\n                          name=\"dateTransferredOut\"\r\n                          id=\"dateTransferredOut\"\r\n                          placeholder=\"Date Transferred Out\"\r\n                          max={new Date().toISOString().slice(0, 10)}\r\n                          className={classes.input}\r\n                          onChange={handleChange}\r\n                          value={inputFields.dateTransferredOut}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n\r\n                  {reasonsNot ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"reasonNotTested\" className={classes.label}>\r\n                          Reason Not Tested\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"reasonNotTested\"\r\n                          id=\"reasonNotTested\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          onChange={(e) => handleChange(e)}\r\n                          value={inputFields.reasonNotTested}\r\n                        >\r\n                          <option hidden>\r\n                            What is the reasons not tested?\r\n                          </option>\r\n                          <option value=\"1\">Testable</option>\r\n                          <option value=\"2\">Technical Problems</option>\r\n                          <option value=\"3\">Labeled Improperly</option>\r\n                          <option value=\"4\">Insufficient Blood</option>\r\n                          <option value=\"5\">Layered or clotted</option>\r\n                          <option value=\"6\">Improper Packaging</option>\r\n                          <option value=\"7\">Other Reasons</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Row>\r\n\r\n                <Row>\r\n                  {reasons === true ? (\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"otherRejectionReason\"\r\n                          className={classes.label}\r\n                        >\r\n                          Other Rejection Reason\r\n                        </Label>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"otherRejectionReason\"\r\n                          id=\"otherRejectionReason\"\r\n                          placeholder=\"Other Rejection Reason\"\r\n                          className={classes.input}\r\n                          onChange={handleChange}\r\n                          value={inputFields.otherRejectionReason}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n                </Row>\r\n\r\n                {tests === true ? (\r\n                  <Row>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label\r\n                          for=\"sendingPCRLabName\"\r\n                          className={classes.label}\r\n                        >\r\n                          Transferred PCR Lab Name\r\n                        </Label>\r\n\r\n                        <select\r\n                          className=\"form-control\"\r\n                          style={{\r\n                            border: \"1px solid #014d88\",\r\n                            borderRadius: \"0px\",\r\n                            fontSize: \"14px\",\r\n                            color: \"#000\",\r\n                          }}\r\n                          name=\"sendingPCRLabName\"\r\n                          value={pcrLabCode.name}\r\n                          id=\"sendingPCRLabName\"\r\n                          onChange={(e) => handleChange(e)}\r\n                        >\r\n                          <option>Select PCR Lab</option>\r\n                          {pcr_lab.map((value, i) => (\r\n                            <option key={i} value={value.name}>\r\n                              {value.name}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col>\r\n                      <FormGroup>\r\n                        <Label for=\"sendingPCRLabID\" className={classes.label}>\r\n                          Transferred PCR Lab ID\r\n                        </Label>\r\n                        &nbsp;&nbsp;\r\n                        <span>\r\n                          <b>\r\n                            {pcrLabCode.labNo\r\n                              ? \"Confirm PCR Id \" + pcrLabCode.labNo\r\n                              : \"\"}\r\n                          </b>\r\n                        </span>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"sendingPCRLabID\"\r\n                          id=\"sendingPCRLabID\"\r\n                          placeholder=\"Transferred PCR Lab ID\"\r\n                          value={inputFields.sendingPCRLabID}\r\n                          className={classes.input}\r\n                          onChange={(e) => handleChange(e)}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n\r\n                <Row>\r\n                  <Col>\r\n                    {\" \"}\r\n                    <FormGroup>\r\n                      <Label for=\"assayDate\" className={classes.label}>\r\n                        Assay Date *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"assayDate\"\r\n                        id=\"assayDate\"\r\n                        placeholder=\"Assay Date\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.assayDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"testedBy\" className={classes.label}>\r\n                        Test By *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"testedBy\"\r\n                        id=\"testedBy\"\r\n                        placeholder=\"Test By\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.testedBy}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"testResult\" className={classes.label}>\r\n                        Test result *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"testResult\"\r\n                        id=\"testResult\"\r\n                        placeholder=\"Test result\"\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.testResult}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col>\r\n                    <FormGroup>\r\n                      <Label for=\"resultDate\" className={classes.label}>\r\n                        Result Date *\r\n                      </Label>\r\n\r\n                      <Input\r\n                        type=\"date\"\r\n                        name=\"resultDate\"\r\n                        id=\"resultDate\"\r\n                        placeholder=\"result Date\"\r\n                        max={new Date().toISOString().slice(0, 10)}\r\n                        className={classes.input}\r\n                        onChange={handleChange}\r\n                        value={inputFields.resultDate}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  disabled={loading}\r\n                >\r\n                  Save\r\n                </MatButton>\r\n\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={props.togglestatus}\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                >\r\n                  Cancel\r\n                </MatButton>\r\n              </ModalBody>\r\n            </Form>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddResultModal;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\ManifestList.js",["138","139"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PrintResults.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\manifest\\CreateAManifest.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleTracker.js",["140","141","142","143","144","145","146","147","148","149","150","151"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResult.js",["152","153","154","155","156"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\results\\PatientResultPrint.js",["157","158","159","160","161","162","163","164","165","166","167","168"],{"ruleId":"169","severity":1,"message":"170","line":4,"column":41,"nodeType":"171","messageId":"172","endLine":4,"endColumn":47},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"169","severity":1,"message":"177","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":20},{"ruleId":"169","severity":1,"message":"178","line":7,"column":10,"nodeType":"171","messageId":"172","endLine":7,"endColumn":16},{"ruleId":"169","severity":1,"message":"177","line":35,"column":10,"nodeType":"171","messageId":"172","endLine":35,"endColumn":20},{"ruleId":"179","severity":1,"message":"180","line":196,"column":6,"nodeType":"181","endLine":196,"endColumn":23,"suggestions":"182"},{"ruleId":"169","severity":1,"message":"183","line":208,"column":9,"nodeType":"171","messageId":"172","endLine":208,"endColumn":22},{"ruleId":"184","severity":1,"message":"185","line":208,"column":49,"nodeType":"186","messageId":"187","endLine":208,"endColumn":51},{"ruleId":"188","severity":1,"message":"189","line":222,"column":9,"nodeType":"190","messageId":"191","endLine":222,"endColumn":12},{"ruleId":"169","severity":1,"message":"192","line":21,"column":25,"nodeType":"171","messageId":"172","endLine":21,"endColumn":41},{"ruleId":"169","severity":1,"message":"193","line":94,"column":10,"nodeType":"171","messageId":"172","endLine":94,"endColumn":17},{"ruleId":"169","severity":1,"message":"194","line":90,"column":10,"nodeType":"171","messageId":"172","endLine":90,"endColumn":17},{"ruleId":"169","severity":1,"message":"195","line":91,"column":9,"nodeType":"171","messageId":"172","endLine":91,"endColumn":18},{"ruleId":"169","severity":1,"message":"196","line":95,"column":10,"nodeType":"171","messageId":"172","endLine":95,"endColumn":18},{"ruleId":"169","severity":1,"message":"197","line":118,"column":13,"nodeType":"171","messageId":"172","endLine":118,"endColumn":17},{"ruleId":"169","severity":1,"message":"198","line":1,"column":8,"nodeType":"171","messageId":"172","endLine":1,"endColumn":17},{"ruleId":"169","severity":1,"message":"199","line":84,"column":17,"nodeType":"171","messageId":"172","endLine":84,"endColumn":25},{"ruleId":"169","severity":1,"message":"200","line":86,"column":16,"nodeType":"171","messageId":"172","endLine":86,"endColumn":23},{"ruleId":"179","severity":1,"message":"201","line":109,"column":6,"nodeType":"181","endLine":109,"endColumn":8,"suggestions":"202"},{"ruleId":"169","severity":1,"message":"193","line":96,"column":10,"nodeType":"171","messageId":"172","endLine":96,"endColumn":17},{"ruleId":"169","severity":1,"message":"203","line":108,"column":19,"nodeType":"171","messageId":"172","endLine":108,"endColumn":29},{"ruleId":"169","severity":1,"message":"194","line":109,"column":10,"nodeType":"171","messageId":"172","endLine":109,"endColumn":17},{"ruleId":"169","severity":1,"message":"195","line":110,"column":9,"nodeType":"171","messageId":"172","endLine":110,"endColumn":18},{"ruleId":"169","severity":1,"message":"204","line":108,"column":9,"nodeType":"171","messageId":"172","endLine":108,"endColumn":16},{"ruleId":"169","severity":1,"message":"205","line":111,"column":10,"nodeType":"171","messageId":"172","endLine":111,"endColumn":16},{"ruleId":"169","severity":1,"message":"206","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":12},{"ruleId":"169","severity":1,"message":"207","line":9,"column":8,"nodeType":"171","messageId":"172","endLine":9,"endColumn":14},{"ruleId":"169","severity":1,"message":"208","line":10,"column":8,"nodeType":"171","messageId":"172","endLine":10,"endColumn":17},{"ruleId":"169","severity":1,"message":"209","line":11,"column":8,"nodeType":"171","messageId":"172","endLine":11,"endColumn":11},{"ruleId":"169","severity":1,"message":"210","line":12,"column":10,"nodeType":"171","messageId":"172","endLine":12,"endColumn":30},{"ruleId":"169","severity":1,"message":"211","line":13,"column":10,"nodeType":"171","messageId":"172","endLine":13,"endColumn":22},{"ruleId":"169","severity":1,"message":"212","line":14,"column":10,"nodeType":"171","messageId":"172","endLine":14,"endColumn":25},{"ruleId":"169","severity":1,"message":"213","line":15,"column":8,"nodeType":"171","messageId":"172","endLine":15,"endColumn":20},{"ruleId":"169","severity":1,"message":"203","line":58,"column":21,"nodeType":"171","messageId":"172","endLine":58,"endColumn":31},{"ruleId":"169","severity":1,"message":"214","line":60,"column":19,"nodeType":"171","messageId":"172","endLine":60,"endColumn":27},{"ruleId":"169","severity":1,"message":"215","line":65,"column":11,"nodeType":"171","messageId":"172","endLine":65,"endColumn":25},{"ruleId":"169","severity":1,"message":"216","line":77,"column":11,"nodeType":"171","messageId":"172","endLine":77,"endColumn":23},{"ruleId":"169","severity":1,"message":"217","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":14},{"ruleId":"169","severity":1,"message":"218","line":3,"column":17,"nodeType":"171","messageId":"172","endLine":3,"endColumn":24},{"ruleId":"169","severity":1,"message":"219","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":17},{"ruleId":"169","severity":1,"message":"220","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":17},{"ruleId":"169","severity":1,"message":"221","line":7,"column":8,"nodeType":"171","messageId":"172","endLine":7,"endColumn":16},{"ruleId":"169","severity":1,"message":"222","line":2,"column":3,"nodeType":"171","messageId":"172","endLine":2,"endColumn":12},{"ruleId":"169","severity":1,"message":"223","line":3,"column":3,"nodeType":"171","messageId":"172","endLine":3,"endColumn":14},{"ruleId":"169","severity":1,"message":"224","line":4,"column":3,"nodeType":"171","messageId":"172","endLine":4,"endColumn":11},{"ruleId":"169","severity":1,"message":"225","line":8,"column":16,"nodeType":"171","messageId":"172","endLine":8,"endColumn":26},{"ruleId":"169","severity":1,"message":"226","line":13,"column":8,"nodeType":"171","messageId":"172","endLine":13,"endColumn":13},{"ruleId":"169","severity":1,"message":"227","line":14,"column":8,"nodeType":"171","messageId":"172","endLine":14,"endColumn":22},{"ruleId":"169","severity":1,"message":"228","line":18,"column":8,"nodeType":"171","messageId":"172","endLine":18,"endColumn":18},{"ruleId":"169","severity":1,"message":"229","line":20,"column":8,"nodeType":"171","messageId":"172","endLine":20,"endColumn":13},{"ruleId":"169","severity":1,"message":"230","line":21,"column":10,"nodeType":"171","messageId":"172","endLine":21,"endColumn":15},{"ruleId":"169","severity":1,"message":"231","line":22,"column":10,"nodeType":"171","messageId":"172","endLine":22,"endColumn":15},{"ruleId":"169","severity":1,"message":"232","line":22,"column":17,"nodeType":"171","messageId":"172","endLine":22,"endColumn":20},{"ruleId":"169","severity":1,"message":"233","line":30,"column":7,"nodeType":"171","messageId":"172","endLine":30,"endColumn":16},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["234"],"no-negated-in-lhs",["235"],"'makeStyles' is defined but never used.","'labObj' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadConfig', 'loadManifestData', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["236"],"'uniqueSamples' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'age'.","ObjectExpression","unexpected","'setSelectedIndex' is assigned a value but never used.","'loading' is assigned a value but never used.","'visible' is assigned a value but never used.","'onDismiss' is assigned a value but never used.","'configId' is assigned a value but never used.","'name' is assigned a value but never used.","'PropTypes' is defined but never used.","'setSaved' is assigned a value but never used.","'setSend' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sampleObj'. Either include it or remove the dependency array.",["237"],"'setLoading' is assigned a value but never used.","'classes' is assigned a value but never used.","'config' is assigned a value but never used.","'Grid' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Box' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDayjs' is defined but never used.","'DateRangePicker' is defined but never used.","'DownloadIcon' is defined but never used.","'setValue' is assigned a value but never used.","'handleDownload' is assigned a value but never used.","'sampleStatus' is assigned a value but never used.","'Link' is defined but never used.","'Spinner' is defined but never used.","'PrintIcon' is defined but never used.","'MatButton' is defined but never used.","'HomeIcon' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","'Alert' is defined but never used.","'AddResultModal' is defined but never used.","'CachedIcon' is defined but never used.","'axios' is defined but never used.","'toast' is defined but never used.","'token' is defined but never used.","'url' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [loadConfig, loadLabTestData, loadManifestData, props]",{"range":"242","text":"243"},"Update the dependencies array to be: [sampleObj]",{"range":"244","text":"245"},[8237,8254],"[loadConfig, loadLabTestData, loadManifestData, props]",[2772,2774],"[sampleObj]"]
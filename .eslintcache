[{"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\index.js":"1","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\App.js":"2","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js":"7","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintManifest.js":"8","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js":"9","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\api.js":"10","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestList.js":"11","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js":"12","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\CreateAManifest.js":"13","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestPrint.js":"14","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js":"15","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js":"16","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Result.js":"17","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResults.js":"18","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js":"19","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResultModal.js":"20","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js":"21","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintResults.js":"22"},{"size":754,"mtime":1663251975958,"results":"23","hashOfConfig":"24"},{"size":1407,"mtime":1667224183167,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1663251978370,"results":"26","hashOfConfig":"24"},{"size":9235,"mtime":1663251975986,"results":"27","hashOfConfig":"24"},{"size":3056,"mtime":1663251975987,"results":"28","hashOfConfig":"24"},{"size":2922,"mtime":1667224183199,"results":"29","hashOfConfig":"24"},{"size":3069,"mtime":1667224183216,"results":"30","hashOfConfig":"24"},{"size":6327,"mtime":1668515780325,"results":"31","hashOfConfig":"24"},{"size":17418,"mtime":1668513704270,"results":"32","hashOfConfig":"24"},{"size":482,"mtime":1668522418345,"results":"33","hashOfConfig":"24"},{"size":10372,"mtime":1668516776137,"results":"34","hashOfConfig":"24"},{"size":9166,"mtime":1663251978365,"results":"35","hashOfConfig":"24"},{"size":15557,"mtime":1667224183205,"results":"36","hashOfConfig":"24"},{"size":4765,"mtime":1667224183209,"results":"37","hashOfConfig":"24"},{"size":101260,"mtime":1667224183218,"results":"38","hashOfConfig":"24"},{"size":4784,"mtime":1663251978361,"results":"39","hashOfConfig":"24"},{"size":11649,"mtime":1668522137083,"results":"40","hashOfConfig":"24"},{"size":33964,"mtime":1667224183202,"results":"41","hashOfConfig":"24"},{"size":15349,"mtime":1667224183206,"results":"42","hashOfConfig":"24"},{"size":32501,"mtime":1667484480251,"results":"43","hashOfConfig":"24"},{"size":7545,"mtime":1668520714941,"results":"44","hashOfConfig":"24"},{"size":5847,"mtime":1668519739114,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"pjo1dr",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"49"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"49"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\index.js",["101"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\";  \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["102","103"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\App.js",["104"],"import React from \"react\";\r\nimport {\r\n  //MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./../src/main/webapp/css/style.css\";\r\n\r\nimport Home from './main/webapp/jsx/components/Home'\r\nimport SampleCollection from './main/webapp/jsx/components/SampleCollection/SamplesCollection';\r\nimport PrintManifest from './main/webapp/jsx/components/SampleCollection/PrintManifest';\r\nimport SampleSearch from './main/webapp/jsx/components/SampleCollection/SampleOrderLists';\r\nimport Result from './main/webapp/jsx/components/SampleCollection/Result'\r\nimport AddResult from './main/webapp/jsx/components/SampleCollection/AddResults'\r\n\r\nexport default function App() {\r\n  return (\r\n      <div>\r\n      <ToastContainer />\r\n        <Switch>\r\n         <Route path=\"/result\">\r\n          <Result />\r\n         </Route>\r\n         <Route path=\"/add-result\">\r\n           <AddResult />\r\n         </Route>\r\n         <Route path=\"/print-manifest\">\r\n             <PrintManifest />\r\n           </Route>\r\n         <Route path=\"/create-manifest\">\r\n            <SampleCollection />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\Home.js",["105","106","107","108","109","110"],"import React, {useState, Fragment, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport SampleCollection from './SampleCollection/SamplesCollection';\r\nimport ManifestList from './SampleCollection/ManifestList';\r\nimport {labObj} from './sampleObj'\r\nimport Login from './SampleCollection/Login'\r\nimport axios from \"axios\";\r\nimport {token, url } from \"../../api\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n    const [key, setKey] = useState('manifest-list');\r\n\r\n    const urlTabs = props.location && props.location.state ? props.location.state : null ;\r\n    const [permissions, setPermissions] = useState([]);\r\n\r\n    const userPermission =()=>{\r\n        axios\r\n            .get(`${url}account`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                console.log(\"Home_permission\", response.data.permissions)\r\n                setPermissions(response.data.permissions);\r\n\r\n            })\r\n            .catch((error) => {\r\n            });\r\n    }\r\n\r\n  useEffect ( () => {\r\n    userPermission()\r\n\r\n    switch(urlTabs){\r\n      case \"existing-manifest\": return setKey('manifest-list')\r\n      case \"collect-sample\": return setKey('collection')\r\n      case \"config\": return setKey('config')\r\n      default: return setKey('manifest-list')\r\n    }\r\n\r\n  }, [urlTabs]);\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                    >\r\n                       <Tab eventKey=\"manifest-list\" title=\"Manifest List\">\r\n                         <ManifestList />\r\n                        </Tab>\r\n                        {\r\n                            permissions.includes('create_manifest') || permissions.includes(\"all_permission\") &&\r\n                            <Tab eventKey=\"collection\" title=\"Create Manifest\">\r\n                             <SampleCollection />\r\n                            </Tab>\r\n                        }\r\n                        {\r\n                            permissions.includes('set_configuration') || permissions.includes(\"all_permission\") &&\r\n                            <Tab eventKey=\"config\" title=\"Configuration\">\r\n                             <Login />\r\n                            </Tab>\r\n                        }\r\n\r\n                    </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SamplesCollection.js",["111","112","113","114"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport SampleOrderLists from './SampleOrderLists';\r\nimport CreateAManifest from './CreateAManifest';\r\nimport PrintManifest from './PrintManifest';\r\nimport Stack from '@mui/material/Stack';\r\nimport axios from \"axios\";\r\nimport {token, url } from \"../../../api\";\r\n\r\nfunction SampleCollection() {\r\nconst [activeStep, setActiveStep] = React.useState(0)\r\nconst [permissions, setPermissions] = useState([]);\r\n\r\n useEffect(() => {\r\n            userPermission();\r\n          }, []);\r\n\r\n        const userPermission =()=>{\r\n            axios\r\n                .get(`${url}account`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(\"permission\", response.data.permissions)\r\n                    setPermissions(response.data.permissions);\r\n\r\n                })\r\n                .catch((error) => {\r\n                });\r\n        }\r\n\r\nconst nextStep = () => {\r\n    if (activeStep < 2)\r\n        setActiveStep((currentStep) => currentStep + 1)\r\n}\r\n\r\nconst previousStep = () => {\r\n    if (activeStep !== 0)\r\n       setActiveStep((currentStep) => currentStep - 1)\r\n}\r\n\r\nconst renderContent = (step) => {\r\n     switch (step) {\r\n        case 0:\r\n          return <SampleOrderLists />;\r\n        case 1:\r\n          return <CreateAManifest />;\r\n        case 2:\r\n          return <PrintManifest />;\r\n        default:\r\n          return <div>Not Found</div>;\r\n      }\r\n}\r\nreturn(\r\n    <div>\r\n        <Stepper activeStep={activeStep}>\r\n            <Step>\r\n                <StepLabel>Select Collected Samples</StepLabel>\r\n            </Step>\r\n            <Step>\r\n                <StepLabel>Complete Manifest Form</StepLabel>\r\n            </Step>\r\n            <Step>\r\n                <StepLabel>Print Manifest</StepLabel>\r\n            </Step>\r\n\r\n        </Stepper>\r\n        <br />\r\n        <>\r\n            {renderContent(activeStep)}\r\n            <br />\r\n            <br />\r\n                { permissions.includes(\"all_permission\") ?\r\n                    <Stack direction=\"row\" spacing={2}\r\n                           m={1}\r\n                           display=\"flex\"\r\n                           justifyContent=\"flex-end\"\r\n                           alignItems=\"flex-end\">\r\n                           <Button variant=\"outlined\" color=\"primary\" onClick={() => previousStep()}\r\n                           >Previous Step</Button>\r\n                           {\" \"}\r\n                           <Button variant=\"outlined\" color=\"primary\" onClick={() => nextStep()}\r\n                           disabled={activeStep == 2 ? true : false}>Next Step</Button>\r\n                    </Stack> : \" \" }\r\n        </>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default SampleCollection","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintManifest.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SampleOrderLists.js",["134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\api.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestList.js",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\sampleObj.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\CreateAManifest.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport ConfigModal from './ConfigModal';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport {  Modal, ModalHeader, ModalBody, Row,\r\n    Col, Card, CardBody, Table,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge\r\n} from 'reactstrap';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { pcr_lab } from './pcr';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'1px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'14px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst CreateAManifest = (props) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    const samples = []\r\n    const [saved, setSaved] = useState(false);\r\n    const [send, setSend] = useState(false);\r\n    const [localStore, SetLocalStore] = useState([]);\r\n    const [manifestsId, setManifestsId] = useState(0);\r\n    const [status, setStatus] = useState(\"Pending\")\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleOpen = () => setOpen(true);\r\n\r\n    const toggleModal = () => setOpen(!open)\r\n\r\n    useEffect(() => {\r\n      const collectedSamples = JSON.parse(localStorage.getItem('samples'));\r\n      if (collectedSamples) {\r\n        SetLocalStore(collectedSamples);\r\n      }\r\n    }, []);\r\n\r\n    const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\"});\r\n\r\n    const [manifestData, setManifestData] = useState({\r\n         manifestID: \"\",\r\n         manifestStatus: \"Pending\",\r\n         sendingFacilityID: \"FH7LMnbnVlT\",\r\n         sendingFacilityName: \"CHC ZUNGERU\",\r\n         receivingLabID: pcrLabCode.labNo,\r\n         receivingLabName: pcrLabCode.name,\r\n         dateScheduledForPickup: \"\",\r\n         temperatureAtPickup: \"\",\r\n         samplePackagedBy: \"\",\r\n         courierRiderName: \"\",\r\n         courierContact: \"\",\r\n         createDate: \"\",\r\n         sampleInformation: localStore,\r\n         id: 0,\r\n         uuid: \"\"\r\n     })\r\n\r\n    const [contactPhone, setContactPhone] = useState(\"\");\r\n\r\n    const checkPhoneNumber=(e)=> {\r\n        setContactPhone(e)\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n           checkPCRLab(event.target.value)\r\n           const { name, value } = event.target\r\n           setManifestData({ ...manifestData, [name]: value, receivingLabID: pcrLabCode.labNo,\r\n           receivingLabName: pcrLabCode.name, sampleInformation: localStore })\r\n    }\r\n\r\n    const checkPCRLab = (name) => {\r\n        pcr_lab.map(( val ) => {\r\n            if (val.name === name) {\r\n                setPcrLabCode({name: val.name, labNo: val.labNo})\r\n            }\r\n        })\r\n    }\r\n\r\n    const validateInputs = () => {\r\n        let temp = { ...errors }\r\n        temp.dateScheduledForPickup = manifestData.dateScheduledForPickup ? \"\" : \"Pick-Up date is required.\"\r\n        temp.temperatureAtPickup = manifestData.temperatureAtPickup ? \"\" : \"Temperature is required.\"\r\n        temp.receivingLabID = manifestData.receivingLabID ? \"\" : \"Receiving lab Id is required.\"\r\n        temp.receivingLabName = manifestData.receivingLabName ? \"\" : \"Receiving lab name is required.\"\r\n        temp.courierRiderName = manifestData.courierRiderName ? \"\" : \"Courier rider name is required.\"\r\n        temp.courierContact = manifestData.courierContact ? \"\" : \"Courier rider contact is required.\"\r\n        temp.samplePackagedBy = manifestData.samplePackagedBy ? \"\" : \"Sample packaged by is required.\"\r\n\r\n        setErrors({\r\n              ...temp\r\n          })\r\n          return Object.values(temp).every(x => x == \"\")\r\n   }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        manifestData.courierContact = contactPhone;\r\n            if (validateInputs()) {\r\n               //console.log(\"submit\", manifestData);\r\n               await axios.post(`${url}lims/manifests`, manifestData,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                    setManifestsId(resp.data.id)\r\n                     //console.log(\"response\", resp)\r\n                    setSaved(true);\r\n                    toast.success(\"Sample manifest saved successfully!!\", {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                    manifestData.manifestID = resp.data.manifestID\r\n                    manifestData.sendingFacilityID = resp.data.sendingFacilityID\r\n                    manifestData.sendingFacilityName = resp.data.sendingFacilityName\r\n\r\n                    localStorage.setItem('manifest', JSON.stringify(manifestData));\r\n                    localStorage.removeItem(\"samples\");\r\n                    handleOpen()\r\n                });\r\n            }\r\n    }\r\n\r\n  return (\r\n      <>\r\n        <Card>\r\n            <CardBody>\r\n             <br/>\r\n             { localStore.length === 0 ?\r\n                <Alert variant='danger' style={{width:'100%',fontSize:'18px', textAlign: 'center'}}>\r\n                  <b>Manifest</b> has no sample logged. pls use the previous button to add samples.\r\n                </Alert>\r\n              :\r\n                <Form>\r\n                    <Row>\r\n                        <Col> <FormGroup>\r\n                         <Label for=\"dateScheduledForPickup\" className={classes.label}>Date & Time *</Label>\r\n                         <Input\r\n                             type=\"datetime-local\"\r\n                             name=\"dateScheduledForPickup\"\r\n                             id=\"dateScheduledForPickup\"\r\n                             placeholder=\"Date & Time Created\"\r\n                             className={classes.input}\r\n                             value={manifestData.dateScheduledForPickup}\r\n                             onChange={handleChange}\r\n\r\n                         />\r\n\r\n                             {errors.dateScheduledForPickup !=\"\" ? (\r\n                               <span className={classes.error}>{errors.dateScheduledForPickup}</span>\r\n                             ) : \"\" }\r\n                     </FormGroup></Col>\r\n                        <Col><FormGroup>\r\n                         <Label for=\"receivingLabName\" className={classes.label}>Receiving Lab *</Label>\r\n                         <select\r\n                             className=\"form-control\"\r\n                             style={{\r\n                              border: \"1px solid #014d88\",\r\n                              borderRadius:'0px',\r\n                              fontSize:'14px',\r\n                              color:'#000'\r\n                              }}\r\n                             name=\"receivingLabName\"\r\n                             value={pcrLabCode.name}\r\n                             id=\"receivingLabName\"\r\n                             onChange={handleChange}\r\n                         >\r\n                           <option>\r\n                             Select PCR Lab\r\n                           </option>\r\n                           {pcr_lab.map((value, i) =>\r\n                           <option key={i} value={value.name} >{value.name}</option>)}\r\n                         </select>\r\n\r\n                          {errors.receivingLabName !=\"\" ? (\r\n                            <span className={classes.error}>{errors.receivingLabName}</span>\r\n                          ) : \"\" }\r\n                     </FormGroup></Col>\r\n                        <Col> <FormGroup>\r\n                          <Label for=\"receivingLabID\" className={classes.label}>Receiving Lab number *</Label>\r\n                          <Input\r\n                              type=\"text\"\r\n                              name=\"receivingLabID\"\r\n                              value={pcrLabCode.labNo}\r\n                              id=\"receivingLabID\"\r\n                              onChange={handleChange}\r\n                              className={classes.input}\r\n                              disabled\r\n                          />\r\n                       {errors.receivingLabID !=\"\" ? (\r\n                          <span className={classes.error}>{errors.receivingLabID}</span>\r\n                        ) : \"\" }\r\n                      </FormGroup></Col>\r\n                    </Row>\r\n                     <Row>\r\n                        <Col><FormGroup>\r\n                         <Label for=\"courierRiderName\" className={classes.label}>Courier Name *</Label>\r\n                         <Input\r\n                             type=\"text\"\r\n                             name=\"courierRiderName\"\r\n                             id=\"courierRiderName\"\r\n                             value={manifestData.courierRiderName}\r\n                             onChange={handleChange}\r\n                             className={classes.input}\r\n                         />\r\n                      {errors.courierRiderName !=\"\" ? (\r\n                           <span className={classes.error}>{errors.courierRiderName}</span>\r\n                         ) : \"\" }\r\n                     </FormGroup></Col>\r\n                        <Col> <FormGroup>\r\n                         <Label for=\"courierContact\" className={classes.label}>Courier Contact *</Label>\r\n                         <PhoneInput\r\n                             containerStyle={{width:'100%', border: \"1px solid #014d88\"}}\r\n                             inputStyle={{width:'100%',borderRadius:'0px', height: 44}}\r\n                             country={'ng'}\r\n                             masks={{ng: '...-...-....', at: '(....) ...-....'}}\r\n                             placeholder=\"(234)7099999999\"\r\n                             value={manifestData.courierContact}\r\n                             onChange={ e => checkPhoneNumber(e)}\r\n                         />\r\n                        {errors.courierContact !=\"\" ? (\r\n                           <span className={classes.error}>{errors.courierContact}</span>\r\n                         ) : \"\" }\r\n                     </FormGroup></Col>\r\n                        <Col><FormGroup>\r\n                      <Label for=\"samplePackagedBy\" className={classes.label}>Sample Packaged By *</Label>\r\n                      <Input\r\n                          type=\"text\"\r\n                          name=\"samplePackagedBy\"\r\n                          value={manifestData.samplePackagedBy}\r\n                          id=\"samplePackagedBy\"\r\n                          onChange={handleChange}\r\n                          className={classes.input}\r\n                      />\r\n                       {errors.samplePackagedBy !=\"\" ? (\r\n                         <span className={classes.error}>{errors.samplePackagedBy}</span>\r\n                       ) : \"\" }\r\n                  </FormGroup></Col>\r\n                    </Row>\r\n                     <Row>\r\n                        {/*<Col> <FormGroup>\r\n                         <Label for=\"manifest_status\" className={classes.label}>Status</Label>\r\n                         <Input\r\n                             type=\"text\"\r\n                             name=\"manifestStatus\"\r\n                             id=\"manifestStatus\"\r\n                             value={status}\r\n                             onChange={handleChange}\r\n                             disabled\r\n                             className={classes.input}\r\n                         />\r\n\r\n                     </FormGroup></Col>*/}\r\n\r\n                    </Row>\r\n                     <Row>\r\n                        <Col><FormGroup>\r\n                        <Label for=\"total_sample\" className={classes.label}>Total Sample</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"total_sample\"\r\n                            id=\"total_sample\"\r\n                            value={localStore.length}\r\n                            onChange={handleChange}\r\n                            disabled\r\n                            className={classes.input}\r\n                        />\r\n\r\n                    </FormGroup></Col>\r\n                        <Col> <FormGroup>\r\n                        <Label for=\"test_type\" className={classes.label}>Test type</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"test_type\"\r\n                            id=\"test_type\"\r\n                            value=\"VL\"\r\n                            onChange={handleChange}\r\n                            disabled\r\n                            className={classes.input}\r\n                        />\r\n\r\n                    </FormGroup></Col>\r\n                      <Col><FormGroup>\r\n                           <Label for=\"temperatureAtPickup\" className={classes.label}>Temperature at pickup</Label>\r\n                           <Input\r\n                               type=\"number\"\r\n                               name=\"temperatureAtPickup\"\r\n                               id=\"temperatureAtPickup\"\r\n                               value={manifestData.temperatureAtPickup}\r\n                               onChange={handleChange}\r\n                               className={classes.input}\r\n                           />\r\n                       {errors.temperatureAtPickup !=\"\" ? (\r\n                          <span className={classes.error}>{errors.temperatureAtPickup}</span>\r\n                        ) : \"\" }\r\n                       </FormGroup></Col>\r\n                    </Row>\r\n                    {\r\n                        !saved ?\r\n                         <>\r\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                            startIcon={<SaveIcon />} onClick={handleSubmit}>\r\n                              Save\r\n                            </Button>\r\n\r\n                        </> : \"\"\r\n                    }\r\n                </Form>\r\n                 }\r\n             </CardBody>\r\n        </Card>\r\n        { open ?\r\n        <ConfigModal modalstatus={open} togglestatus={toggleModal} manifestsId={manifestsId} saved={saved} /> : \" \"}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default CreateAManifest;","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ManifestPrint.js",["220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport {logo} from './pcr'\r\n\r\nimport {  Modal, ModalHeader, ModalBody,\r\n    Row, Col,Input,\r\n    FormGroup,\r\n    Label,Card, CardBody, Table\r\n} from 'reactstrap';\r\n\r\nlet today = new Date().toLocaleDateString('en-us', { weekday:\"long\", year:\"numeric\", month:\"short\", day:\"numeric\"})\r\n\r\nclass ManifestPrint extends React.Component {\r\n  render() {\r\n    //console.log(this.props.sampleObj)\r\n    return (\r\n             <Card>\r\n              <CardBody>\r\n               <Row>\r\n                  <span>{today}</span>\r\n                     <Table size=\"sm\">\r\n                          <tbody>\r\n                               <tr>\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                  <th scope=\"row\" className=\"text-center\">\r\n                                    <img src={logo} style={{width: \"80px\", height: \"80px\"}}/>\r\n                                  </th>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                  <th scope=\"row\"><h2 className=\"text-center\">NISRN TRANSPORTATION MANIFEST</h2></th>\r\n\r\n                                  <th scope=\"row\"></th>\r\n\r\n                                </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                  </Row>\r\n                <br/>\r\n                <br />\r\n            <Row>\r\n                   <Table bordered size=\"sm\">\r\n                      <tbody>\r\n                           <tr>\r\n                              <th scope=\"row\">Pick Up Date:</th>\r\n                              <td>{this.props.sampleObj.dateScheduledForPickup === null ? \" \" : this.props.sampleObj.dateScheduledForPickup?.replace(\"T\", \" \")}</td>\r\n                              <th scope=\"row\">Destination:</th>\r\n                              <td>{this.props.sampleObj.receivingLabName}</td>\r\n                              <th scope=\"row\">PCR Lab Number:</th>\r\n                              <td>{this.props.sampleObj.receivingLabID}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <th scope=\"row\">Status:</th>\r\n                              <td>{this.props.sampleObj.manifestStatus}</td>\r\n                              <th scope=\"row\">Manifest Id:</th>\r\n                              <td>{this.props.sampleObj.manifestID}</td>\r\n                              <th scope=\"row\">Sample Temperature:</th>\r\n                              <td>{this.props.sampleObj.temperatureAtPickup}</td>\r\n                            </tr>\r\n                             <tr>\r\n                              <th scope=\"row\">Courier Name:</th>\r\n                              <td>{this.props.sampleObj.courierRiderName}</td>\r\n                              <th scope=\"row\">Courier Contact:</th>\r\n                              <td>{\"+\" + this.props.sampleObj.courierContact}</td>\r\n                              <th scope=\"row\">Test Type:</th>\r\n                              <td>VL</td>\r\n                            </tr>\r\n                      </tbody>\r\n                    </Table>\r\n              </Row>\r\n              <br/>\r\n              <Row>\r\n                     <Table striped bordered size=\"sm\">\r\n                        <thead style={{  backgroundColor:'#014d88', color:'#fff' }}>\r\n                          <tr>\r\n                            <th>Facility</th>\r\n                            <th>Patient ID</th>\r\n                            <th>Sample ID</th>\r\n                            <th>Sample Type</th>\r\n                            <th>Date Collected</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            { this.props.sampleObj.sampleInformation && this.props.sampleObj.sampleInformation.map((data, i) => (\r\n                                 <tr key={i}>\r\n                                    <td scope=\"row\">{this.props.sampleObj.sendingFacilityName}</td>\r\n                                    <td>{data.patientID[0].idNumber}</td>\r\n                                    <td>{data.sampleID}</td>\r\n                                    <td>{data.sampleType}</td>\r\n                                    <td>{data.sampleCollectionDate}</td>\r\n                                  </tr>\r\n                            ))}\r\n                        </tbody>\r\n                      </Table>\r\n                </Row>\r\n                <br />\r\n                <span>LAMISPlus 2.0</span>\r\n              </CardBody>\r\n             </Card>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ManifestPrint;","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\pcr.js",[],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\SplitActionButton.js",["234","235","236","237","238","239","240","241"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ContentCut from '@mui/icons-material/ContentCut';\r\nimport Typography from '@mui/material/Typography';\r\nimport {FaEye, FaCaretDown } from \"react-icons/fa\";\r\nimport Divider from '@mui/material/Divider';\r\nimport {useRef} from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nconst options = ['Delete', 'Edit'];\r\n\r\n\r\n\r\nexport default function SplitActionButton(props) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} style={{backgroundColor:'rgb(153, 46, 98)', height:'30px',width:'150px'}} >\r\n                <Link to={props.actions[0].to} style={{borderRight:'20px solid #fff !important'}}>\r\n                    <Button size=\"small\" onClick={handleClick} variant=\"contained\" startIcon={props.actions[0].icon} style={{backgroundColor:'rgb(153, 46, 98)'}}>\r\n                        <Typography variant=\"h7\" style={{fontWeight:'bolder'}}>{props.actions[0].name}</Typography>\r\n                    </Button>\r\n                </Link>\r\n\r\n                <Divider orientation=\"vertical\" flexItem style={{borderRight:'20px solid #fff !important', backgroundColor:'#fff',width:'1px', height:'26px',marginTop:'2px'}}>\r\n                    1\r\n                </Divider>\r\n                <Button\r\n                    size=\"medium\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                    style={{backgroundColor:'rgb(153, 46, 98)'}}\r\n                >\r\n                    <FaCaretDown size='24' />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{ zIndex:'10000' }}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                            zIndex:'1000'\r\n                        }}\r\n                    >\r\n                        {/*width: 130,*/}\r\n                        <Paper sx={{ minWidth:'130px', maxWidth: '150px', marginTop:'2px', zIndex:'1000' }}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" autoFocusItem>\r\n                                    {props.actions.slice(1).map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={Math.random()}\r\n                                        >\r\n                                            <Link\r\n                                                to={option.to}\r\n                                            >\r\n                                                {option.icon}<span style={{color: 'rgb(153, 46, 98)', fontWeight:'bolder', fontSize:'12px'}}>{option.name}</span>\r\n                                            </Link>\r\n\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Result.js",["242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResults.js",["261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287"],"import React, {useEffect, useCallback, useState, useRef, forwardRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\nimport MaterialTable from 'material-table';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport {format} from \"date-fns\";\r\nimport { pcr_lab } from './pcr';\r\n\r\nimport { CardBody,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge\r\n} from 'reactstrap';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'1px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'14px',\r\n        color:'#000'\r\n    },\r\n    arial: {\r\n        border:'1px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'15px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n   label:{\r\n       fontSize:'14px',\r\n       color:'#014d88',\r\n       fontWeight:'bold'\r\n   }\r\n}))\r\n\r\nconst AddResult = (props) => {\r\n    let history = useHistory();\r\n    const manifestObj = history.location && history.location.state ? history.location.state.manifestObj : {}\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : []\r\n    const sampleIDs = []\r\n    const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\"});\r\n    manifestObj.sampleInformation.map((e) => {\r\n        sampleIDs.push(e)\r\n    })\r\n\r\n    //console.log(\"maniObj\",manifestObj)\r\n    //console.log(\"permissions\",permissions)\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true)\r\n    const [results, setResults] = useState({\r\n         manifestID: manifestObj.manifestID,\r\n         receivingFacilityID: manifestObj.receivingLabID,\r\n         receivingFacilityName: manifestObj.receivingLabName,\r\n         sendingPCRLabID: manifestObj.sendingFacilityID,\r\n         sendingPCRLabName: manifestObj.sendingFacilityName,\r\n         testType: \"Viral Load\",\r\n         samples: []\r\n    })\r\n\r\n    const [initialValue, SetInitialValue] = useState(0)\r\n    const [tests, setTests] = useState(false);\r\n    const [transferredOut, setTransferredOut] = useState(false);\r\n    const [reasons, setReasons] = useState(false);\r\n\r\n    const [inputFields, setInputFields] = useState([{\r\n        manifestRecordID: manifestObj.id,\r\n        dateResultDispatched: \"\",\r\n        dateSampleReceivedAtPcrLab: \"\",\r\n        testResult: \"\",\r\n        resultDate: \"\",\r\n        pcrLabSampleNumber: \"\",\r\n        approvalDate: \"\",\r\n        assayDate: \"\",\r\n        sampleTestable: \"\",\r\n        sampleStatus: \"\",\r\n        sampleID: sampleIDs[initialValue],\r\n        uuid: \"\",\r\n        visitDate: format(new Date(), 'yyyy-MM-dd'),\r\n        transferStatus: \"\",\r\n        testedBy: \"\",\r\n        approvedBy: \"\",\r\n        dateTransferredOut: \"\",\r\n        reasonNotTested: \"\",\r\n        otherRejectionReason: \"\",\r\n        sendingPCRLabID: \"\",\r\n        sendingPCRLabName: \"\"\r\n    }])\r\n\r\n     const handleChange = (i, event) => {\r\n           let data = [...inputFields]\r\n           const { name, value } = event.target\r\n\r\n           //console.log(name, value)\r\n\r\n          if (name === \"sendingPCRLabName\") {\r\n              checkPCRLab(value)\r\n              console.log(pcrLabCode.labNo)\r\n          }\r\n\r\n          if (name === 'transferStatus' && value === '2' || name === 'transferStatus' && value === '3' || name === 'transferStatus' && value === '4') {\r\n               setTests(true)\r\n               setTransferredOut(true)\r\n          }\r\n\r\n          if (name === 'reasonNotTested' && value === '7') {\r\n               setReasons(true)\r\n          }\r\n\r\n           data[i].manifestRecordID = manifestObj.id\r\n           data[i][name] = value\r\n           data[i].uuid = \"\"\r\n           data[i].visitDate = format(new Date(), 'yyyy-MM-dd')\r\n\r\n           setInputFields(data)\r\n           //console.log(\"inputs\",inputFields)\r\n     }\r\n\r\n     const checkPCRLab = (name) => {\r\n         pcr_lab.map(( val ) => {\r\n             if (val.name === name) {\r\n                 setPcrLabCode({name: val.name, labNo: val.labNo})\r\n             }\r\n         })\r\n     }\r\n\r\n     const handleSubmit = async (e) => {\r\n         e.preventDefault()\r\n         console.log(\"inputFields\",inputFields)\r\n         try {\r\n             console.log(inputFields)\r\n\r\n              await axios.post(`${url}lims/results`, inputFields,\r\n                 { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                     console.log(\"results\", resp)\r\n\r\n                     toast.success(\"PCR Sample results added successfully!!\", {\r\n                         position: toast.POSITION.TOP_RIGHT\r\n                     });\r\n\r\n                 });\r\n                 history.push(\"/\");\r\n             } catch (e) {\r\n                toast.error(\"An error occurred while adding PCR Sample results\", {\r\n                     position: toast.POSITION.TOP_RIGHT\r\n                 });\r\n             }\r\n         }\r\n\r\n     const addField = (e) => {\r\n        e.preventDefault()\r\n        SetInitialValue(initialValue+1)\r\n\r\n//        console.log(initialValue)\r\n//        console.log(sampleIDs)\r\n//        console.log(sampleIDs[initialValue])\r\n\r\n        if (initialValue === 0) {\r\n            toast.success(\"click the Add More button to add more fields...\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n\r\n        if (initialValue > 0) {\r\n            let newField = {\r\n                   testResult: \"\",\r\n                   resultDate: \"\",\r\n                   pcrLabSampleNumber: \"\",\r\n                   approvalDate: \"\",\r\n                   assayDate: \"\",\r\n                   sampleTestable: \"\",\r\n                   sampleStatus: \"\",\r\n                   sampleID: sampleIDs[initialValue]\r\n               }\r\n\r\n          if (initialValue < sampleIDs.length) {\r\n               setInputFields([...inputFields, newField])\r\n          }else{\r\n            toast.error(\"Total Number of samples reached for this manifest\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          }\r\n\r\n        }\r\n\r\n     }\r\n\r\n     const removeField = (index, e) => {\r\n        e.preventDefault()\r\n        SetInitialValue(initialValue-1)\r\n        let data = [...inputFields];\r\n            data.splice(index, 1)\r\n            setInputFields(data)\r\n     }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n         <Card.Body>\r\n\r\n          <p style={{textAlign: 'right'}}>\r\n          <Link color=\"inherit\"\r\n            to={{pathname: \"/\"}}\r\n             >\r\n            <MatButton\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<HomeIcon />}>\r\n                back Home\r\n            </MatButton>\r\n           </Link>\r\n          </p>\r\n           <hr />\r\n           <Form>\r\n                 <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                        <Alert.Heading>Basic Manifest Information</Alert.Heading>\r\n                 </Alert>\r\n                <Row>\r\n                  <Col> <FormGroup>\r\n                       <Label for=\"manifestID\" className={classes.label}>Manifest Id</Label>\r\n\r\n                       <Input\r\n                           type=\"text\"\r\n                           name=\"manifestID\"\r\n                           id=\"manifestID\"\r\n                           placeholder=\"manifest ID\"\r\n                           className={classes.input}\r\n                           onChange={handleChange}\r\n                           value={manifestObj.manifestID}\r\n                           disabled\r\n                       />\r\n                   </FormGroup></Col>\r\n                  <Col><FormGroup>\r\n                   <Label for=\"testType\" className={classes.label}>Test Type</Label>\r\n\r\n                   <Input\r\n                       type=\"text\"\r\n                       name=\"testType\"\r\n                       id=\"testType\"\r\n                       placeholder=\"Test Type\"\r\n                       className={classes.input}\r\n                       onChange={handleChange}\r\n                       value=\"Viral Load  \"\r\n                   />\r\n               </FormGroup></Col>\r\n                  <Col></Col>\r\n                  <Col></Col>\r\n                </Row>\r\n              <Row>\r\n                <Col><FormGroup>\r\n                     <Label for=\"sendingPCRLabName\" className={classes.label}>Facility</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"sendingPCRLabName\"\r\n                         id=\"sendingPCRLabName\"\r\n                         placeholder=\"Sending PCR LabName\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.sendingFacilityName}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col><FormGroup>\r\n                     <Label for=\"sendingPCRLabID\" className={classes.label}>Facility ID</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"sendingPCRLabID\"\r\n                         id=\"sendingPCRLabID\"\r\n                         placeholder=\"Sending PCR Lab ID\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.sendingFacilityID}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col> <FormGroup>\r\n                     <Label for=\"receivingFacilityName\" className={classes.label}>Receiving Facility</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"receivingFacilityName\"\r\n                         id=\"receivingFacilityName\"\r\n                         placeholder=\"Receiving Facility Name\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.receivingLabName}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n                <Col><FormGroup>\r\n                     <Label for=\"receivingFacilityID\" className={classes.label}>Receiving Facility ID</Label>\r\n\r\n                     <Input\r\n                         type=\"text\"\r\n                         name=\"receivingFacilityID\"\r\n                         id=\"receivingFacilityID\"\r\n                         placeholder=\"Receiving Facility ID\"\r\n                         className={classes.input}\r\n                         onChange={handleChange}\r\n                         value={manifestObj.receivingLabID}\r\n                         disabled\r\n                     />\r\n                 </FormGroup></Col>\r\n              </Row>\r\n              <br />\r\n                <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#992E62', color: \"#fff\", textAlign: 'center'}}>\r\n                  <Alert.Heading>PCR Sample Details</Alert.Heading>\r\n               </Alert>\r\n                { inputFields && inputFields.map(x => (\r\n                      sampleIDs.filter((key) => key.sampleID === x.sampleID).map((x) => (\r\n                              <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                               <p style={{marginTop: '.7rem' }}>Name: <span style={{ fontWeight: 'bolder'}}>{x.firstName + \" \" + x.surName+ \" \"}</span>\r\n                                   &nbsp;&nbsp;&nbsp;&nbsp; Patient ID::\r\n                                   <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.patientID[0].idNumber}</span>\r\n                                   &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                                   <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.sampleType }</span>\r\n                                           &nbsp;&nbsp;&nbsp;&nbsp; Date collected :\r\n                                   <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.sampleCollectionDate}</span>\r\n                                    &nbsp;&nbsp;&nbsp;&nbsp; Sample collected By:\r\n                                    <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.sampleCollectedBy}</span>\r\n\r\n                               </p>\r\n                             </Alert>\r\n                    ))\r\n                 ))\r\n\r\n                }\r\n               {\r\n                    manifestObj.sampleInformation.length > 0 && inputFields.map((data, i) => (\r\n                    <>\r\n                          <Row>\r\n                             <Col>\r\n                              <FormGroup>\r\n                                    <Label for=\"sampleID\" className={classes.label}>Sample ID *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sampleID\"\r\n                                        id=\"sampleID\"\r\n                                        style={{\r\n                                          border: \"1px solid #014d88\",\r\n                                          borderRadius:'0px',\r\n                                          fontSize:'14px',\r\n                                          color:'#000'\r\n                                        }}\r\n\r\n                                        onChange={ e => handleChange(i, e)}\r\n                                    >\r\n                                     <option hidden>\r\n                                         Select Sample Id\r\n                                     </option>\r\n                                     { sampleIDs && sampleIDs.map((sample, i) =>\r\n                                     <option key={i} value={sample.sampleID} >{sample.sampleID}</option>)}\r\n                                    </select>\r\n                                </FormGroup>\r\n                             </Col>\r\n                              <Col>\r\n                               <FormGroup>\r\n                                     <Label for=\"sampleTestable\" className={classes.label}>Sample Testable *</Label>\r\n                                     <select\r\n                                         className=\"form-control\"\r\n                                         name=\"sampleTestable\"\r\n                                         id=\"sampleTestable\"\r\n                                         style={{\r\n                                           border: \"1px solid #014d88\",\r\n                                           borderRadius:'0px',\r\n                                           fontSize:'14px',\r\n                                           color:'#000'\r\n                                         }}\r\n                                         onChange={ e => handleChange(i, e)}\r\n                                     >\r\n                                      <option hidden>\r\n                                          Is Sample Testable ?\r\n                                      </option>\r\n                                      <option value=\"true\" >True</option>\r\n                                      <option value=\"false\" >False</option>\r\n                                     </select>\r\n                                 </FormGroup>\r\n                              </Col>\r\n\r\n                             <Col>\r\n                               <FormGroup>\r\n                                     <Label for=\"sampleStatus\" className={classes.label}>Sample Status *</Label>\r\n                                     <select\r\n                                         className=\"form-control\"\r\n                                         name=\"sampleStatus\"\r\n                                         id=\"sampleStatus\"\r\n                                         style={{\r\n                                            border: \"1px solid #014d88\",\r\n                                            borderRadius:'0px',\r\n                                            fontSize:'14px',\r\n                                            color:'#000'\r\n                                          }}\r\n                                         onChange={ e => handleChange(i, e)}\r\n                                     >\r\n                                      <option hidden>\r\n                                          Select Sample status\r\n                                      </option>\r\n                                      <option value=\"1\" >Completed</option>\r\n                                      <option value=\"2\" >Rejected</option>\r\n                                      <option value=\"3\" >In-Progress</option>\r\n                                      <option value=\"4\" >Re-run</option>\r\n                                     </select>\r\n                                 </FormGroup>\r\n                              </Col>\r\n\r\n                            <Col> <FormGroup>\r\n                                 <Label for=\"assayDate\" className={classes.label}>Assay Date *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"date\"\r\n                                     name=\"assayDate\"\r\n                                     id=\"assayDate\"\r\n                                     max={new Date().toISOString().slice(0, 10)}\r\n                                     //min={new Date(datasample.dateSampleVerified)}\r\n                                     placeholder=\"Assay Date\"\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                          </Row>\r\n                          <Row>\r\n                                <Col><FormGroup>\r\n                                  <Label for=\"transferStatus\" className={classes.label}>Transfer Status</Label>\r\n                                  <select\r\n                                     className=\"form-control\"\r\n                                     name=\"transferStatus\"\r\n                                     id=\"transferStatus\"\r\n                                     style={{\r\n                                         border: \"1px solid #014d88\",\r\n                                         borderRadius:'0px',\r\n                                         fontSize:'14px',\r\n                                         color:'#000'\r\n                                       }}\r\n                                     onChange={ e => handleChange(i, e)}\r\n                                     value={inputFields.transferStatus}\r\n                                 >\r\n                                  <option hidden>\r\n                                      Select transfer status\r\n                                  </option>\r\n                                  <option value=\"1\" >Not Transfered</option>\r\n                                  <option value=\"2\" >Received</option>\r\n                                  <option value=\"3\" >In Process</option>\r\n                                  <option value=\"4\" >Tested</option>\r\n                                 </select>\r\n                               </FormGroup></Col>\r\n\r\n                               <Col><FormGroup>\r\n                                   <Label for=\"reasonNotTested\" className={classes.label}>Reason Not Tested</Label>\r\n                                   <select\r\n                                     className=\"form-control\"\r\n                                     name=\"reasonNotTested\"\r\n                                     id=\"reasonNotTested\"\r\n                                     style={{\r\n                                         border: \"1px solid #014d88\",\r\n                                         borderRadius:'0px',\r\n                                         fontSize:'14px',\r\n                                         color:'#000'\r\n                                       }}\r\n                                     onChange={ e => handleChange(i, e)}\r\n                                     value={inputFields.reasonNotTested}\r\n                                 >\r\n                                  <option hidden>\r\n                                      What is the reasons not tested?\r\n                                  </option>\r\n                                  <option value=\"1\" >Testable</option>\r\n                                  <option value=\"2\" >Technical Problems</option>\r\n                                  <option value=\"3\" >Labeled Improperly</option>\r\n                                  <option value=\"4\" >Insufficient Blood</option>\r\n                                  <option value=\"5\" >Layered or clotted</option>\r\n                                  <option value=\"6\" >Improper Packaging</option>\r\n                                  <option value=\"7\" >Other Reasons</option>\r\n                                 </select>\r\n                               </FormGroup></Col>\r\n\r\n                               <Col><FormGroup>\r\n                                   <Label for=\"approvedBy\" className={classes.label}>Approved By*</Label>\r\n\r\n                                   <Input\r\n                                       type=\"text\"\r\n                                       name=\"approvedBy\"\r\n                                       id=\"approvedBy\"\r\n                                       placeholder=\"approvedBy\"\r\n                                       className={classes.input}\r\n                                       onChange={e => handleChange(i, e)}\r\n                                       value={inputFields.approvedBy}\r\n                                   />\r\n                               </FormGroup></Col>\r\n\r\n                                  <Col><FormGroup>\r\n                                   <Label for=\"testedBy\" className={classes.label}>Test By *</Label>\r\n\r\n                                   <Input\r\n                                       type=\"text\"\r\n                                       name=\"testedBy\"\r\n                                       id=\"testedBy\"\r\n                                       placeholder=\"Test By\"\r\n                                       className={classes.input}\r\n                                       onChange={e => handleChange(i, e)}\r\n                                       value={inputFields.testedBy}\r\n                                   />\r\n                               </FormGroup></Col>\r\n\r\n                                    { transferredOut === true ?\r\n                                      <Col><FormGroup>\r\n                                           <Label for=\"dateTransferredOut\" className={classes.label}>Date Transferred Out</Label>\r\n\r\n                                           <Input\r\n                                               type=\"date\"\r\n                                               name=\"dateTransferredOut\"\r\n                                               id=\"dateTransferredOut\"\r\n                                               placeholder=\"Date Transferred Out\"\r\n                                               max={new Date().toISOString().slice(0, 10)}\r\n                                               className={classes.input}\r\n                                               onChange={e => handleChange(i, e)}\r\n                                               value={inputFields.dateTransferredOut}\r\n                                           />\r\n                                       </FormGroup></Col> : \" \" }\r\n                                       { reasons === true ?\r\n                                      <Col><FormGroup>\r\n                                       <Label for=\"otherRejectionReason\" className={classes.label}>Other Rejection Reason</Label>\r\n                                       <Input\r\n                                           type=\"text\"\r\n                                           name=\"otherRejectionReason\"\r\n                                           id=\"otherRejectionReason\"\r\n                                           placeholder=\"Other Rejection Reason\"\r\n                                           className={classes.input}\r\n                                           onChange={e => handleChange(i, e)}\r\n                                           value={inputFields.otherRejectionReason}\r\n                                       />\r\n                                   </FormGroup></Col> : \" \" }\r\n                          </Row>\r\n                            <Row>\r\n                              <Col><FormGroup>\r\n                                   <Label for=\"dateSampleReceivedAtPcrLab\" className={classes.label}>Date sample at PCR Lab *</Label>\r\n\r\n                                   <Input\r\n                                       type=\"date\"\r\n                                       name=\"dateSampleReceivedAtPcrLab\"\r\n                                       id=\"dateSampleReceivedAtPcrLab\"\r\n                                       placeholder=\"result Date\"\r\n                                       max={new Date().toISOString().slice(0, 10)}\r\n                                       className={classes.input}\r\n                                       onChange={e => handleChange(i, e)}\r\n                                   />\r\n                               </FormGroup></Col>\r\n                               <Col><FormGroup>\r\n                                <Label for=\"dateResultDispatched\" className={classes.label}>Date Result Dispatched *</Label>\r\n\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"dateResultDispatched\"\r\n                                    id=\"dateResultDispatched\"\r\n                                    placeholder=\"result Date\"\r\n                                    max={new Date().toISOString().slice(0, 10)}\r\n                                    className={classes.input}\r\n                                    onChange={e => handleChange(i, e)}\r\n                                />\r\n                            </FormGroup></Col>\r\n                            <Col>\r\n                             <FormGroup>\r\n                                 <Label for=\"approvalDate\" className={classes.label}>Approval Date *</Label>\r\n\r\n                                 <Input\r\n                                     type=\"date\"\r\n                                     name=\"approvalDate\"\r\n                                     id=\"approvalDate\"\r\n                                     placeholder=\"Approval Date\"\r\n                                     max={new Date().toISOString().slice(0, 10)}\r\n                                     className={classes.input}\r\n                                     onChange={e => handleChange(i, e)}\r\n                                 />\r\n                             </FormGroup></Col>\r\n                              <Col><FormGroup>\r\n                                  <Label for=\"pcrLabSampleNumber\" className={classes.label}>Pcr Lab Sample No *</Label>\r\n\r\n                                  <Input\r\n                                      type=\"text\"\r\n                                      name=\"pcrLabSampleNumber\"\r\n                                      id=\"pcrLabSampleNumber\"\r\n                                      placeholder=\"Pcr Lab Sample Number\"\r\n                                      className={classes.input}\r\n                                      onChange={e => handleChange(i, e)}\r\n                                  />\r\n                              </FormGroup></Col>\r\n                          </Row>\r\n                        <Row>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"resultDate\" className={classes.label}>Result Date *</Label>\r\n\r\n                             <Input\r\n                                 type=\"date\"\r\n                                 name=\"resultDate\"\r\n                                 id=\"resultDate\"\r\n                                 placeholder=\"result Date\"\r\n                                 max={new Date().toISOString().slice(0, 10)}\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                          <Col><FormGroup>\r\n                             <Label for=\"testResult\" className={classes.label}>Test result *</Label>\r\n\r\n                             <Input\r\n                                 type=\"text\"\r\n                                 name=\"testResult\"\r\n                                 id=\"testResult\"\r\n                                 placeholder=\"Test result\"\r\n                                 className={classes.input}\r\n                                 onChange={e => handleChange(i, e)}\r\n                             />\r\n                         </FormGroup></Col>\r\n                          { tests === true ?\r\n                            <>\r\n                                <Col><FormGroup>\r\n                                     <Label for=\"sendingPCRLabName\" className={classes.label}>Transferred PCR Lab Name</Label>\r\n\r\n                                      <select\r\n                                          className=\"form-control\"\r\n                                          style={{\r\n                                           border: \"1px solid #014d88\",\r\n                                           borderRadius:'0px',\r\n                                           fontSize:'14px',\r\n                                           color:'#000'\r\n                                           }}\r\n                                          name=\"sendingPCRLabName\"\r\n                                          value={pcrLabCode.name}\r\n                                          id=\"sendingPCRLabName\"\r\n                                          onChange={ e => handleChange(i, e)}\r\n                                      >\r\n                                        <option>\r\n                                          Select PCR Lab\r\n                                        </option>\r\n                                        {pcr_lab.map((value, i) =>\r\n                                        <option key={i} value={value.name} >{value.name}</option>)}\r\n                                      </select>\r\n                                 </FormGroup></Col>\r\n                                <Col><FormGroup>\r\n                                 <Label for=\"sendingPCRLabID\" className={classes.label}>Transferred PCR Lab ID</Label>\r\n                                 &nbsp;&nbsp;<span>Confirm PCR Id <b>{pcrLabCode.labNo}</b></span>\r\n                                 <Input\r\n                                     type=\"text\"\r\n                                     name=\"sendingPCRLabID\"\r\n                                     id=\"sendingPCRLabID\"\r\n                                     placeholder=\"Transferred PCR Lab ID\"\r\n                                     value={inputFields.sendingPCRLabID}\r\n                                     className={classes.input}\r\n                                     onChange={ e => handleChange(i, e)}\r\n\r\n                                 />\r\n                             </FormGroup></Col>\r\n                             </>\r\n                        : <><Col></Col>\r\n                          <Col></Col></> }\r\n\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col style={{textAlign: 'right'}}>\r\n                                <Button variant=\"contained\" color=\"error\"\r\n                                   startIcon={<DeleteIcon />} onClick={ e => removeField(i, e)} >\r\n                                 Remove PCR Sample\r\n                               </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <hr />\r\n                    </>\r\n                    ))\r\n               }\r\n               { permissions.includes(\"all_permission\") ? <Button variant=\"contained\" color=\"secondary\"\r\n                      startIcon={<AddIcon />} onClick={addField}>\r\n                    Add More\r\n                  </Button> : \" \"}\r\n                  {\" \"}\r\n\r\n                { permissions.includes(\"all_permission\") ? <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                   startIcon={<SaveIcon />} onClick={handleSubmit} >\r\n                 Save Result\r\n               </Button> : \" \"}\r\n           </Form>\r\n\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddResult;","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\Login.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, {useEffect, useCallback, useState, useRef, forwardRef} from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, Card, Table } from \"react-bootstrap\";\r\nimport MaterialTable from 'material-table';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport AddResultModal from './AddResultModal';\r\n\r\nimport { CardBody,\r\n    Form, FormFeedback, FormGroup, FormText,\r\n    Input,\r\n    Label, Badge, Spinner\r\n} from 'reactstrap';\r\n\r\nimport \"./sample.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CachedIcon from '@mui/icons-material/Cached';\r\n\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../api\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'1px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'14px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n    label:{\r\n        fontSize:'14px',\r\n        color:'#014d88',\r\n        fontWeight:'600'\r\n    }\r\n}))\r\n\r\nconst Login = (props) => {\r\n    let history = useHistory();\r\n    const manifestObj = history.location && history.location.state ? history.location.state.manifestObj : {}\r\n    //console.log(\"maniObj\",manifestObj)\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : []\r\n    const [errors, setErrors] = useState({});\r\n    const [demo, setDemo] = useState(false);\r\n\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true)\r\n    const [login, setLogin] = useState({\r\n        configName: \"\",\r\n        serverUrl: \"\",\r\n        configEmail: \"\",\r\n        configPassword: \"\",\r\n        testFacilityDATIMCode: \"\",\r\n        testFacilityName: \"\"\r\n    })\r\n\r\n    const [logins, setLogins] = useState([])\r\n\r\n    const loadResults = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}lims/configs`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //console.log(\"configs\", response);\r\n            setLogins(response.data)\r\n            setLoading(false)\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching config details\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadResults()\r\n    }, [loadResults]);\r\n\r\n    const handleChange = (event) => {\r\n           const { name, value } = event.target\r\n           //console.log(name, value)\r\n           if (name === 'configName' && value === 'Demo Server') {\r\n               setDemo(true)\r\n           }else if (name === 'configName' && value === 'Live Server') {\r\n               setDemo(false)\r\n           }\r\n           setLogin({ ...login, [name] : value})\r\n     }\r\n\r\n    const validateInputs = () => {\r\n       let temp = { ...errors }\r\n       temp.configName = login.configName ? \"\" : \"Server Name is required.\"\r\n       temp.serverUrl = login.serverUrl ? \"\" : \"Server URL is required.\"\r\n       temp.configEmail = login.configEmail ? \"\" : \"Email is required.\"\r\n       temp.configPassword = login.configPassword ? \"\" : \"Configuration password URL is required.\"\r\n\r\n        setErrors({\r\n             ...temp\r\n         })\r\n         return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n         e.preventDefault()\r\n         try {\r\n\r\n           if (validateInputs()) {\r\n             await axios.post(`${url}lims/configs`, login,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                    console.log(\"login details\", resp)\r\n\r\n                    toast.success(\"LIMS Credentials saved successfully!!\", {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n\r\n                     setLogin({\r\n                         configName: \"\",\r\n                         serverUrl: \"\",\r\n                         configEmail: \"\",\r\n                         configPassword: \"\",\r\n                         facilityId: \"\",\r\n                         receivingPCRLabId: \"\"\r\n                     })\r\n                });\r\n\r\n            loadResults()\r\n\r\n           }\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while saving LIMS Credentials\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n        history.push(\"/\");\r\n     }\r\n\r\n    const deleteConfig = async (e, id) => {\r\n      e.preventDefault();\r\n        try {\r\n            const response = await axios.delete(`${url}lims/configs/${id}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\" delete config\", response);\r\n            loadResults()\r\n            toast.success(\"LIMS Credentials deleted successfully!!\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while deleting a config\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n            setLoading(false)\r\n        }\r\n     }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n         <Card.Body>\r\n             <hr />\r\n              {\r\n                <>\r\n                   <Alert style={{width:'100%',fontSize:'16px', backgroundColor: '#014d88', color: \"#fff\", textAlign: 'center'}}>\r\n                           <Alert.Heading>LIMS Configuration Details</Alert.Heading>\r\n                    </Alert>\r\n\r\n                   <Row>\r\n                        <Col xs={6} md={4}>\r\n\r\n                            <Form>\r\n                                 <FormGroup>\r\n                                   <Label for=\"configName\" className={classes.label}>Configuration Name</Label>\r\n                                   <select\r\n                                       className=\"form-control\"\r\n                                      style={{\r\n                                        border: \"1px solid #014d88\",\r\n                                        borderRadius:'0px',\r\n                                        fontSize:'14px',\r\n                                        color:'#000'\r\n                                        }}\r\n                                       name=\"configName\"\r\n                                       value={login.configName}\r\n                                       id=\"configName\"\r\n                                       onChange={handleChange}\r\n                                   >\r\n                                    <option hidden>\r\n                                        Select Configuration Server\r\n                                    </option>\r\n                                    <option value=\"Demo Server\">\r\n                                        Demo Server\r\n                                    </option>\r\n                                    <option value=\"Live Server\">\r\n                                        Live Server\r\n                                    </option>\r\n                                   </select>\r\n\r\n                                 {errors.configName !=\"\" ? (\r\n                                      <span className={classes.error}>{errors.configName}</span>\r\n                                    ) : \"\" }\r\n                               </FormGroup>\r\n                               <FormGroup>\r\n                                  <Label for=\"serverUrl\" className={classes.label}>URL</Label>\r\n                                  <Input\r\n                                      type=\"text\"\r\n                                      name=\"serverUrl\"\r\n                                      id=\"serverUrl\"\r\n                                      placeholder=\"Server URL\"\r\n                                      className={classes.input}\r\n                                      onChange={handleChange}\r\n                                      value={login.serverUrl}\r\n                                  />\r\n                                  {errors.serverUrl !=\"\" ? (\r\n                                    <span className={classes.error}>{errors.serverUrl}</span>\r\n                                  ) : \"\" }\r\n                              </FormGroup>\r\n                                <FormGroup>\r\n                                   <Label for=\"configEmail\" className={classes.label}>Email</Label>\r\n\r\n                                   <Input\r\n                                       type=\"text\"\r\n                                       name=\"configEmail\"\r\n                                       id=\"configEmail\"\r\n                                       placeholder=\"E-Mail\"\r\n                                       className={classes.input}\r\n                                       onChange={handleChange}\r\n                                       value={login.configEmail}\r\n                                   />\r\n                                    {errors.configEmail !=\"\" ? (\r\n                                       <span className={classes.error}>{errors.configEmail}</span>\r\n                                     ) : \"\" }\r\n                               </FormGroup>\r\n\r\n                               <FormGroup>\r\n                                  <Label for=\"configPassword\" className={classes.label}>Password</Label>\r\n\r\n                                  <Input\r\n                                      type=\"password\"\r\n                                      name=\"configPassword\"\r\n                                      id=\"configPassword\"\r\n                                      placeholder=\"configuration password\"\r\n                                      className={classes.input}\r\n                                      onChange={handleChange}\r\n                                      value={login.configPassword}\r\n                                  />\r\n\r\n                                  {errors.configPassword !=\"\" ? (\r\n                                     <span className={classes.error}>{errors.configPassword}</span>\r\n                                   ) : \"\" }\r\n                              </FormGroup>\r\n                               { demo === true ?\r\n                               <>\r\n                                <FormGroup>\r\n                                    <Label for=\"testFacilityDATIMCode\" className={classes.label}>Testing Facility Datim Code</Label>\r\n\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"testFacilityDATIMCode\"\r\n                                        id=\"testFacilityDATIMCode\"\r\n                                        placeholder=\"Testing Facility Datim Code\"\r\n                                        className={classes.input}\r\n                                        onChange={handleChange}\r\n                                        value={login.testFacilityDATIMCode}\r\n                                    />\r\n                                </FormGroup>\r\n\r\n                                  <FormGroup>\r\n                                      <Label for=\"testFacilityName\" className={classes.label}>Testing Facility Name</Label>\r\n\r\n                                      <Input\r\n                                          type=\"text\"\r\n                                          name=\"testFacilityName\"\r\n                                          id=\"testFacilityName\"\r\n                                          placeholder=\"Testing Facility Name\"\r\n                                          className={classes.input}\r\n                                          onChange={handleChange}\r\n                                          value={login.testFacilityName}\r\n                                      />\r\n                                  </FormGroup>\r\n                                </>\r\n                                : \"\" }\r\n                              <Button variant=\"contained\" color=\"primary\" type=\"submit\"\r\n                                 startIcon={<SaveIcon />} onClick={handleSubmit} >\r\n                               Save\r\n                             </Button>\r\n                            </Form>\r\n                        </Col>\r\n                        <Col xs={6} md={8}>\r\n                            <Table bordered size=\"sm\" responsive>\r\n                                <thead style={{  backgroundColor:'#014d88', color:'#fff', textAlign: 'center' }}>\r\n                                    <tr>\r\n                                        <th>S/N</th>\r\n                                        <th>Configuration Name</th>\r\n                                        <th>URL</th>\r\n                                        <th>Email</th>\r\n                                        {/*<th>Created Date</th>*/}\r\n                                        <th>Actions</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody style={{ textAlign: 'center' }}>\r\n                                { logins && logins.map((data, i) => (\r\n                                     <tr key={i}>\r\n                                        <td>{++i}</td>\r\n                                        <td>{data.configName}</td>\r\n                                        <td>{data.serverUrl}</td>\r\n                                        <td>{data.configEmail}</td>\r\n                                        {/*<td>09/09/2022</td>*/}\r\n                                        <td>\r\n                                        <Button variant=\"contained\" color=\"error\"\r\n                                             startIcon={<DeleteIcon />} onClick={ e => deleteConfig( e, data.id)}>\r\n                                         </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                   </Row>\r\n                </>\r\n              }\r\n\r\n         </Card.Body>\r\n       </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\AddResultModal.js",["314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React, { useState, useEffect } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,FormFeedback,Row,Alert,Col,Input,FormGroup,Label,Card,CardBody,} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport {format} from \"date-fns\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { connect } from \"react-redux\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport {token, url } from \"../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { toast} from \"react-toastify\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { pcr_lab } from './pcr';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        border:'1px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'14px',\r\n        color:'#000'\r\n    },\r\n    arial: {\r\n        border:'2px solid #014d88',\r\n        borderRadius:'0px',\r\n        fontSize:'15px',\r\n        color:'#000'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    inputGroupText:{\r\n        backgroundColor:'#014d88',\r\n        fontWeight:\"bolder\",\r\n        color:'#fff',\r\n        borderRadius:'0px'\r\n    },\r\n   label:{\r\n       fontSize:'14px',\r\n       color:'#014d88',\r\n       fontWeight:'bold'\r\n   },\r\n    modalStyle1:{\r\n       position:'absolute',\r\n       overflow:'scroll',\r\n       height:'100%',\r\n     }\r\n}))\r\n\r\nconst AddResultModal = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles()\r\n    const { manifestObj, reload } = props\r\n    //console.log(\"main\", manifestObj)\r\n\r\n    const sampleIDs = []\r\n    manifestObj.sampleInformation.map((e) => {\r\n        sampleIDs.push(e)\r\n    })\r\n\r\n    const [pcrLabCode, setPcrLabCode] = useState({ name: \"\", labNo: \"\"});\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [samples, setSamples] = useState({});\r\n    const [optionsample, setOptionsample] = useState([]);\r\n    const [saveButtonStatus, setSaveButtonStatus] = useState(false);\r\n    const [tests, setTests] = useState(false);\r\n    const [transferredOut, setTransferredOut] = useState(false);\r\n    const [reasons, setReasons] = useState(false);\r\n    const [reasonsNot, setReasonsNot] = useState(false);\r\n    const [transferredStatus, setTransferredStatus] = useState(false);\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [inputFields, setInputFields] = useState({\r\n            manifestRecordID: manifestObj.id,\r\n            //id: 0,\r\n            dateResultDispatched: \"\",\r\n            dateSampleReceivedAtPcrLab: \"\",\r\n            testResult: \"\",\r\n            resultDate: \"\",\r\n            pcrLabSampleNumber: \"\",\r\n            approvalDate: \"\",\r\n            assayDate: \"\",\r\n            sampleTestable: \"\",\r\n            sampleStatus: \"\",\r\n            sampleID: \"\",\r\n            uuid: \"\",\r\n            visitDate: format(new Date(), 'yyyy-MM-dd'),\r\n            transferStatus: \"\",\r\n            testedBy: \"\",\r\n            approvedBy: \"\",\r\n            dateTransferredOut: \"\",\r\n            reasonNotTested: \"\",\r\n            otherRejectionReason: \"\",\r\n            sendingPCRLabID: \"\",\r\n            sendingPCRLabName: \"\"\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const checkPCRLab = (name) => {\r\n        pcr_lab.map(( val ) => {\r\n            if (val.name === name) {\r\n                setPcrLabCode({name: val.name, labNo: val.labNo})\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n           event.preventDefault();\r\n\r\n           const { name, value } = event.target\r\n            console.log(name, value)\r\n\r\n           if (name === \"sendingPCRLabName\") {\r\n               checkPCRLab(value)\r\n               console.log(pcrLabCode.labNo)\r\n           }\r\n\r\n           if (name === \"sampleStatus\" && value === '2') {\r\n               setReasonsNot(true);\r\n               setTransferredStatus(false);\r\n           }\r\n\r\n           if (name === \"sampleStatus\" && value === '5') {\r\n               setTransferredStatus(true);\r\n               setReasonsNot(false);\r\n           }\r\n\r\n           if (name === 'transferStatus' && value === '2' || name === 'transferStatus' && value === '3' || name === 'transferStatus' && value === '4') {\r\n                setTests(true)\r\n                setTransferredOut(true)\r\n           }else if (name === 'transferStatus' && value === '1') {\r\n                setTests(false)\r\n                setTransferredOut(false)\r\n           }\r\n\r\n           if (name === 'reasonNotTested' && value === '7') {\r\n                setReasons(true)\r\n           }\r\n\r\n           setInputFields({ ...inputFields, [name]: value})\r\n     }\r\n\r\n    const saveSample = async (e) => {\r\n        e.preventDefault();\r\n\r\n         try {\r\n             console.log(inputFields)\r\n\r\n              await axios.post(`${url}lims/results`, [inputFields],\r\n                 { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                     console.log(\"results\", resp)\r\n\r\n                     toast.success(\"PCR Sample results added successfully!!\", {\r\n                         position: toast.POSITION.TOP_RIGHT\r\n                     });\r\n\r\n                      setInputFields({\r\n                          dateResultDispatched: \"\",\r\n                          dateSampleReceivedAtPcrLab: \"\",\r\n                          testResult: \"\",\r\n                          resultDate: \"\",\r\n                          pcrLabSampleNumber: \"\",\r\n                          approvalDate: \"\",\r\n                          assayDate: \"\",\r\n                          sampleTestable: \"\",\r\n                          sampleStatus: \"\",\r\n                          sampleID: \"\",\r\n                          uuid: \"\",\r\n                          visitDate: format(new Date(), 'yyyy-MM-dd'),\r\n                      })\r\n                 });\r\n             //history.push(\"/\");\r\n             props.togglestatus();\r\n             reload();\r\n         } catch (e) {\r\n            toast.error(\"An error occurred while adding PCR Sample results\", {\r\n                 position: toast.POSITION.TOP_RIGHT\r\n             });\r\n         }\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form onSubmit={saveSample}>\r\n                            <ModalHeader toggle={props.togglestatus}>\r\n                            { sampleIDs.filter((key) => key.sampleID === inputFields.sampleID).map((x) => (\r\n                                       <Alert color=\"primary\" style={{color:\"#000\" , fontWeight: 'bolder', }}>\r\n                                        <p style={{marginTop: '.7rem' }}>Name: <span style={{ fontWeight: 'bolder'}}>{x.firstName + \" \" + x.surName+ \" \"}</span>\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp; Patient ID::\r\n                                            <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.patientID[0].idNumber}</span>\r\n                                            &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                                            <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.sampleType }</span>\r\n                                                    &nbsp;&nbsp;&nbsp;&nbsp; Date collected :\r\n                                            <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.sampleCollectionDate}</span>\r\n                                             &nbsp;&nbsp;&nbsp;&nbsp; Sample collected By:\r\n                                             <span style={{ fontWeight: 'bolder'}}>{\" \"}{x.sampleCollectedBy}</span>\r\n\r\n                                        </p>\r\n                                      </Alert>\r\n                             ))\r\n                            }\r\n                            </ModalHeader>\r\n\r\n                            <ModalBody>\r\n                                 <Row>\r\n                                        <Col><FormGroup>\r\n                                            <Label for=\"dateResultDispatched\" className={classes.label}>Date Result Dispatched *</Label>\r\n\r\n                                            <Input\r\n                                                type=\"date\"\r\n                                                name=\"dateResultDispatched\"\r\n                                                id=\"dateResultDispatched\"\r\n                                                max={new Date().toISOString().slice(0, 10)}\r\n                                                className={classes.input}\r\n                                                onChange={handleChange}\r\n                                                value={inputFields.dateResultDispatched}\r\n                                            />\r\n                                        </FormGroup></Col>\r\n                                       <Col><FormGroup>\r\n                                        <Label for=\"dateSampleReceivedAtPcrLab\" className={classes.label}>Date Sample Received at PCR Lab *</Label>\r\n\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            name=\"dateSampleReceivedAtPcrLab\"\r\n                                            id=\"dateSampleReceivedAtPcrLab\"\r\n                                            max={new Date().toISOString().slice(0, 10)}\r\n                                            className={classes.input}\r\n                                            onChange={handleChange}\r\n                                            value={inputFields.dateSampleReceivedAtPcrLab}\r\n                                        />\r\n                                    </FormGroup></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                      <FormGroup>\r\n                                            <Label for=\"sampleID\" className={classes.label}>Sample ID *</Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"sampleID\"\r\n                                                id=\"sampleID\"\r\n                                                style={{\r\n                                                   border: \"1px solid #014d88\",\r\n                                                   borderRadius:'0px',\r\n                                                   fontSize:'14px',\r\n                                                   color:'#000'\r\n                                                 }}\r\n                                                onChange={ e => handleChange(e)}\r\n                                                value={inputFields.sampleID}\r\n                                            >\r\n                                             <option hidden>\r\n                                                 Select Sample Id\r\n                                             </option>\r\n                                             { sampleIDs && sampleIDs.map((sample, i) =>\r\n                                             <option key={i} value={sample.sampleID} >{sample.sampleID}</option>)}\r\n                                            </select>\r\n                                        </FormGroup>\r\n                                     </Col>\r\n                                       <Col>\r\n                                         <FormGroup>\r\n                                               <Label for=\"surName\" className={classes.label}>Sample Testable *</Label>\r\n                                               <select\r\n                                                   className=\"form-control\"\r\n                                                   name=\"sampleTestable\"\r\n                                                   id=\"sampleTestable\"\r\n                                                   style={{\r\n                                                       border: \"1px solid #014d88\",\r\n                                                       borderRadius:'0px',\r\n                                                       fontSize:'14px',\r\n                                                       color:'#000'\r\n                                                     }}\r\n                                                   onChange={ e => handleChange(e)}\r\n                                                   value={inputFields.sampleTestable}\r\n                                               >\r\n                                                <option hidden>\r\n                                                    Is Sample Testable ?\r\n                                                </option>\r\n                                                <option value=\"true\" >True</option>\r\n                                                <option value=\"false\" >False</option>\r\n                                               </select>\r\n                                           </FormGroup>\r\n                                        </Col>\r\n\r\n                                  </Row>\r\n\r\n                                  <Row>\r\n                                       <Col><FormGroup>\r\n                                           <Label for=\"approvedBy\" className={classes.label}>Approved By*</Label>\r\n\r\n                                           <Input\r\n                                               type=\"text\"\r\n                                               name=\"approvedBy\"\r\n                                               id=\"approvedBy\"\r\n                                               placeholder=\"approvedBy\"\r\n                                               className={classes.input}\r\n                                               onChange={handleChange}\r\n                                               value={inputFields.approvedBy}\r\n                                           />\r\n                                       </FormGroup></Col>\r\n                                      <Col>\r\n                                         <FormGroup>\r\n                                             <Label for=\"approvalDate\" className={classes.label}>Approval Date *</Label>\r\n\r\n                                             <Input\r\n                                                 type=\"date\"\r\n                                                 name=\"approvalDate\"\r\n                                                 id=\"approvalDate\"\r\n                                                 placeholder=\"Approval Date\"\r\n                                                 max={new Date().toISOString().slice(0, 10)}\r\n                                                 className={classes.input}\r\n                                                 onChange={handleChange}\r\n                                                 value={inputFields.approvalDate}\r\n                                             />\r\n                                         </FormGroup></Col>\r\n\r\n                                    </Row>\r\n                                <Row>\r\n                                   <Col>\r\n                                      <FormGroup>\r\n                                            <Label for=\"sampleStatus\" className={classes.label}>Sample Status *</Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"sampleStatus\"\r\n                                                id=\"sampleStatus\"\r\n                                                style={{\r\n                                                   border: \"1px solid #014d88\",\r\n                                                   borderRadius:'0px',\r\n                                                   fontSize:'14px',\r\n                                                   color:'#000'\r\n                                                 }}\r\n                                                onChange={ e => handleChange(e)}\r\n                                                value={inputFields.sampleStatus}\r\n                                            >\r\n                                             <option hidden>\r\n                                                 Select Sample status\r\n                                             </option>\r\n                                             <option value=\"1\" >Completed</option>\r\n                                             <option value=\"2\" >Rejected</option>\r\n                                             <option value=\"3\" >In-Progress</option>\r\n                                             <option value=\"4\" >Re-run</option>\r\n                                             <option value=\"5\" >Transferred</option>\r\n                                            </select>\r\n                                        </FormGroup>\r\n                                     </Col>\r\n\r\n                                      <Col><FormGroup>\r\n                                       <Label for=\"pcrLabSampleNumber\" className={classes.label}>Pcr Lab Sample No *</Label>\r\n\r\n                                       <Input\r\n                                           type=\"text\"\r\n                                           name=\"pcrLabSampleNumber\"\r\n                                           id=\"pcrLabSampleNumber\"\r\n                                           placeholder=\"Pcr Lab Sample Number\"\r\n                                           className={classes.input}\r\n                                           onChange={handleChange}\r\n                                           value={inputFields.pcrLabSampleNumber}\r\n                                       />\r\n                                   </FormGroup></Col>\r\n                            </Row>\r\n\r\n                                <Row>\r\n                                 { transferredStatus ?\r\n                                    <Col><FormGroup>\r\n                                      <Label for=\"transferStatus\" className={classes.label}>Transfer Status</Label>\r\n                                      <select\r\n                                         className=\"form-control\"\r\n                                         name=\"transferStatus\"\r\n                                         id=\"transferStatus\"\r\n                                         style={{\r\n                                             border: \"1px solid #014d88\",\r\n                                             borderRadius:'0px',\r\n                                             fontSize:'14px',\r\n                                             color:'#000'\r\n                                           }}\r\n                                         onChange={ e => handleChange(e)}\r\n                                         value={inputFields.transferStatus}\r\n                                     >\r\n                                      <option hidden>\r\n                                          Select transfer status\r\n                                      </option>\r\n                                      <option value=\"1\" >Not Transferred</option>\r\n                                      <option value=\"2\" >Received</option>\r\n                                      <option value=\"3\" >In Process</option>\r\n                                      <option value=\"4\" >Tested</option>\r\n\r\n                                     </select>\r\n                                   </FormGroup></Col>\r\n                                   : \"\"}\r\n\r\n                                    { transferredOut === true ?\r\n                                     <Col><FormGroup>\r\n                                          <Label for=\"dateTransferredOut\" className={classes.label}>Date Transferred Out</Label>\r\n\r\n                                          <Input\r\n                                              type=\"date\"\r\n                                              name=\"dateTransferredOut\"\r\n                                              id=\"dateTransferredOut\"\r\n                                              placeholder=\"Date Transferred Out\"\r\n                                              max={new Date().toISOString().slice(0, 10)}\r\n                                              className={classes.input}\r\n                                              onChange={handleChange}\r\n                                              value={inputFields.dateTransferredOut}\r\n                                          />\r\n                                      </FormGroup></Col> : \" \" }\r\n\r\n                                    { reasonsNot ?\r\n                                        <Col><FormGroup>\r\n                                            <Label for=\"reasonNotTested\" className={classes.label}>Reason Not Tested</Label>\r\n                                            <select\r\n                                              className=\"form-control\"\r\n                                              name=\"reasonNotTested\"\r\n                                              id=\"reasonNotTested\"\r\n                                              style={{\r\n                                                  border: \"1px solid #014d88\",\r\n                                                  borderRadius:'0px',\r\n                                                  fontSize:'14px',\r\n                                                  color:'#000'\r\n                                                }}\r\n                                              onChange={ e => handleChange(e)}\r\n                                              value={inputFields.reasonNotTested}\r\n                                          >\r\n                                           <option hidden>\r\n                                               What is the reasons not tested?\r\n                                           </option>\r\n                                           <option value=\"1\" >Testable</option>\r\n                                           <option value=\"2\" >Technical Problems</option>\r\n                                           <option value=\"3\" >Labeled Improperly</option>\r\n                                           <option value=\"4\" >Insufficient Blood</option>\r\n                                           <option value=\"5\" >Layered or clotted</option>\r\n                                           <option value=\"6\" >Improper Packaging</option>\r\n                                           <option value=\"7\" >Other Reasons</option>\r\n                                          </select>\r\n                                        </FormGroup></Col>\r\n                                     : \"\"}\r\n                                </Row>\r\n\r\n                               <Row>\r\n\r\n                                   { reasons === true ?\r\n                                      <Col><FormGroup>\r\n                                       <Label for=\"otherRejectionReason\" className={classes.label}>Other Rejection Reason</Label>\r\n                                       <Input\r\n                                           type=\"text\"\r\n                                           name=\"otherRejectionReason\"\r\n                                           id=\"otherRejectionReason\"\r\n                                           placeholder=\"Other Rejection Reason\"\r\n                                           className={classes.input}\r\n                                           onChange={handleChange}\r\n                                           value={inputFields.otherRejectionReason}\r\n                                       />\r\n                                   </FormGroup></Col> : \" \" }\r\n                               </Row>\r\n\r\n                               { tests === true ?\r\n                                      <Row>\r\n                                               <Col><FormGroup>\r\n                                                    <Label for=\"sendingPCRLabName\" className={classes.label}>Transferred PCR Lab Name</Label>\r\n\r\n                                                     <select\r\n                                                         className=\"form-control\"\r\n                                                         style={{\r\n                                                          border: \"1px solid #014d88\",\r\n                                                          borderRadius:'0px',\r\n                                                          fontSize:'14px',\r\n                                                          color:'#000'\r\n                                                          }}\r\n                                                         name=\"sendingPCRLabName\"\r\n                                                         value={pcrLabCode.name}\r\n                                                         id=\"sendingPCRLabName\"\r\n                                                         onChange={ e => handleChange(e)}\r\n                                                     >\r\n                                                       <option>\r\n                                                         Select PCR Lab\r\n                                                       </option>\r\n                                                       {pcr_lab.map((value, i) =>\r\n                                                       <option key={i} value={value.name} >{value.name}</option>)}\r\n                                                     </select>\r\n                                                </FormGroup></Col>\r\n                                               <Col><FormGroup>\r\n                                                <Label for=\"sendingPCRLabID\" className={classes.label}>Transferred PCR Lab ID</Label>\r\n                                                &nbsp;&nbsp;<span><b>{pcrLabCode.labNo ? \"Confirm PCR Id \" + pcrLabCode.labNo : \"\"}</b></span>\r\n                                                <Input\r\n                                                    type=\"text\"\r\n                                                    name=\"sendingPCRLabID\"\r\n                                                    id=\"sendingPCRLabID\"\r\n                                                    placeholder=\"Transferred PCR Lab ID\"\r\n                                                    value={inputFields.sendingPCRLabID}\r\n                                                    className={classes.input}\r\n                                                    onChange={ e => handleChange(e)}\r\n\r\n                                                />\r\n                                            </FormGroup></Col>\r\n                                        </Row> : \" \" }\r\n\r\n                                <Row>\r\n                                      <Col> <FormGroup>\r\n                                          <Label for=\"assayDate\" className={classes.label}>Assay Date *</Label>\r\n\r\n                                          <Input\r\n                                              type=\"date\"\r\n                                              name=\"assayDate\"\r\n                                              id=\"assayDate\"\r\n                                              placeholder=\"Assay Date\"\r\n                                              max={new Date().toISOString().slice(0, 10)}\r\n                                              className={classes.input}\r\n                                              onChange={handleChange}\r\n                                              value={inputFields.assayDate}\r\n                                          />\r\n                                      </FormGroup></Col>\r\n\r\n                                       <Col><FormGroup>\r\n                                        <Label for=\"testedBy\" className={classes.label}>Test By *</Label>\r\n\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"testedBy\"\r\n                                            id=\"testedBy\"\r\n                                            placeholder=\"Test By\"\r\n                                            className={classes.input}\r\n                                            onChange={handleChange}\r\n                                            value={inputFields.testedBy}\r\n                                        />\r\n                                    </FormGroup></Col>\r\n                                </Row>\r\n                                <Row>\r\n                                      <Col><FormGroup>\r\n                                            <Label for=\"testResult\" className={classes.label}>Test result *</Label>\r\n\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                name=\"testResult\"\r\n                                                id=\"testResult\"\r\n                                                placeholder=\"Test result\"\r\n                                                className={classes.input}\r\n                                                onChange={handleChange}\r\n                                                value={inputFields.testResult}\r\n                                            />\r\n                                        </FormGroup></Col>\r\n                                        <Col><FormGroup>\r\n                                            <Label for=\"resultDate\" className={classes.label}>Result Date *</Label>\r\n\r\n                                            <Input\r\n                                                type=\"date\"\r\n                                                name=\"resultDate\"\r\n                                                id=\"resultDate\"\r\n                                                placeholder=\"result Date\"\r\n                                                max={new Date().toISOString().slice(0, 10)}\r\n                                                className={classes.input}\r\n                                                onChange={handleChange}\r\n                                                value={inputFields.resultDate}\r\n                                            />\r\n                                        </FormGroup></Col>\r\n\r\n                                </Row>\r\n\r\n                                <MatButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<SaveIcon />}\r\n                                    disabled={loading}\r\n                                >\r\n                                    Save\r\n                                </MatButton>\r\n\r\n                                <MatButton\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    onClick={props.togglestatus}\r\n                                    className={classes.button}\r\n                                    startIcon={<CancelIcon />}\r\n                                >\r\n                                    Cancel\r\n                                </MatButton>\r\n                            </ModalBody>\r\n                        </Form>\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddResultModal;","C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\ConfigModal.js",["344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367"],"C:\\Users\\victor.ajor\\projects\\lims-module\\src\\main\\webapp\\jsx\\components\\SampleCollection\\PrintResults.js",["368","369","370","371","372","373","374","375","376","377","378","379","380","381"],{"ruleId":"382","severity":1,"message":"383","line":4,"column":41,"nodeType":"384","messageId":"385","endLine":4,"endColumn":47},{"ruleId":"386","replacedBy":"387"},{"ruleId":"388","replacedBy":"389"},{"ruleId":"382","severity":1,"message":"390","line":16,"column":8,"nodeType":"384","messageId":"385","endLine":16,"endColumn":20},{"ruleId":"382","severity":1,"message":"391","line":2,"column":10,"nodeType":"384","messageId":"385","endLine":2,"endColumn":20},{"ruleId":"382","severity":1,"message":"392","line":6,"column":9,"nodeType":"384","messageId":"385","endLine":6,"endColumn":15},{"ruleId":"393","severity":1,"message":"394","line":67,"column":69,"nodeType":"395","messageId":"396","endLine":67,"endColumn":71},{"ruleId":"393","severity":1,"message":"394","line":67,"column":111,"nodeType":"395","messageId":"396","endLine":67,"endColumn":113},{"ruleId":"393","severity":1,"message":"394","line":73,"column":71,"nodeType":"395","messageId":"396","endLine":73,"endColumn":73},{"ruleId":"393","severity":1,"message":"394","line":73,"column":113,"nodeType":"395","messageId":"396","endLine":73,"endColumn":115},{"ruleId":"382","severity":1,"message":"397","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":38},{"ruleId":"382","severity":1,"message":"398","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":11},{"ruleId":"382","severity":1,"message":"399","line":7,"column":8,"nodeType":"384","messageId":"385","endLine":7,"endColumn":18},{"ruleId":"400","severity":1,"message":"401","line":88,"column":49,"nodeType":"402","messageId":"403","endLine":88,"endColumn":51},{"ruleId":"382","severity":1,"message":"397","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":38},{"ruleId":"382","severity":1,"message":"404","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":17},{"ruleId":"382","severity":1,"message":"405","line":4,"column":10,"nodeType":"384","messageId":"385","endLine":4,"endColumn":17},{"ruleId":"382","severity":1,"message":"406","line":5,"column":10,"nodeType":"384","messageId":"385","endLine":5,"endColumn":13},{"ruleId":"382","severity":1,"message":"407","line":5,"column":15,"nodeType":"384","messageId":"385","endLine":5,"endColumn":18},{"ruleId":"382","severity":1,"message":"408","line":9,"column":8,"nodeType":"384","messageId":"385","endLine":9,"endColumn":22},{"ruleId":"382","severity":1,"message":"409","line":10,"column":8,"nodeType":"384","messageId":"385","endLine":10,"endColumn":15},{"ruleId":"382","severity":1,"message":"410","line":11,"column":8,"nodeType":"384","messageId":"385","endLine":11,"endColumn":18},{"ruleId":"382","severity":1,"message":"411","line":13,"column":10,"nodeType":"384","messageId":"385","endLine":13,"endColumn":20},{"ruleId":"382","severity":1,"message":"412","line":18,"column":8,"nodeType":"384","messageId":"385","endLine":18,"endColumn":14},{"ruleId":"382","severity":1,"message":"413","line":19,"column":8,"nodeType":"384","messageId":"385","endLine":19,"endColumn":13},{"ruleId":"382","severity":1,"message":"414","line":91,"column":12,"nodeType":"384","messageId":"385","endLine":91,"endColumn":19},{"ruleId":"382","severity":1,"message":"415","line":91,"column":21,"nodeType":"384","messageId":"385","endLine":91,"endColumn":31},{"ruleId":"382","severity":1,"message":"416","line":92,"column":12,"nodeType":"384","messageId":"385","endLine":92,"endColumn":28},{"ruleId":"382","severity":1,"message":"417","line":92,"column":30,"nodeType":"384","messageId":"385","endLine":92,"endColumn":49},{"ruleId":"382","severity":1,"message":"418","line":93,"column":11,"nodeType":"384","messageId":"385","endLine":93,"endColumn":23},{"ruleId":"382","severity":1,"message":"419","line":94,"column":12,"nodeType":"384","messageId":"385","endLine":94,"endColumn":17},{"ruleId":"382","severity":1,"message":"420","line":94,"column":19,"nodeType":"384","messageId":"385","endLine":94,"endColumn":27},{"ruleId":"421","severity":1,"message":"422","line":111,"column":8,"nodeType":"423","endLine":111,"endColumn":10,"suggestions":"424"},{"ruleId":"382","severity":1,"message":"404","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":17},{"ruleId":"382","severity":1,"message":"425","line":3,"column":10,"nodeType":"384","messageId":"385","endLine":3,"endColumn":14},{"ruleId":"382","severity":1,"message":"405","line":4,"column":10,"nodeType":"384","messageId":"385","endLine":4,"endColumn":17},{"ruleId":"382","severity":1,"message":"406","line":5,"column":10,"nodeType":"384","messageId":"385","endLine":5,"endColumn":13},{"ruleId":"382","severity":1,"message":"407","line":5,"column":15,"nodeType":"384","messageId":"385","endLine":5,"endColumn":18},{"ruleId":"382","severity":1,"message":"426","line":6,"column":9,"nodeType":"384","messageId":"385","endLine":6,"endColumn":14},{"ruleId":"382","severity":1,"message":"427","line":6,"column":16,"nodeType":"384","messageId":"385","endLine":6,"endColumn":21},{"ruleId":"382","severity":1,"message":"428","line":6,"column":23,"nodeType":"384","messageId":"385","endLine":6,"endColumn":32},{"ruleId":"382","severity":1,"message":"408","line":9,"column":8,"nodeType":"384","messageId":"385","endLine":9,"endColumn":22},{"ruleId":"382","severity":1,"message":"409","line":10,"column":8,"nodeType":"384","messageId":"385","endLine":10,"endColumn":15},{"ruleId":"382","severity":1,"message":"410","line":11,"column":8,"nodeType":"384","messageId":"385","endLine":11,"endColumn":18},{"ruleId":"382","severity":1,"message":"412","line":25,"column":8,"nodeType":"384","messageId":"385","endLine":25,"endColumn":14},{"ruleId":"382","severity":1,"message":"413","line":26,"column":8,"nodeType":"384","messageId":"385","endLine":26,"endColumn":13},{"ruleId":"382","severity":1,"message":"429","line":123,"column":11,"nodeType":"384","messageId":"385","endLine":123,"endColumn":18},{"ruleId":"382","severity":1,"message":"430","line":139,"column":11,"nodeType":"384","messageId":"385","endLine":139,"endColumn":23},{"ruleId":"431","severity":1,"message":"432","line":165,"column":43,"nodeType":"433","messageId":"434","endLine":165,"endColumn":45},{"ruleId":"431","severity":1,"message":"432","line":166,"column":45,"nodeType":"433","messageId":"434","endLine":166,"endColumn":47},{"ruleId":"435","severity":1,"message":"436","line":185,"column":51,"nodeType":"437","messageId":"438","endLine":185,"endColumn":52,"fix":"439"},{"ruleId":"382","severity":1,"message":"440","line":223,"column":16,"nodeType":"384","messageId":"385","endLine":223,"endColumn":25},{"ruleId":"382","severity":1,"message":"441","line":226,"column":16,"nodeType":"384","messageId":"385","endLine":226,"endColumn":23},{"ruleId":"421","severity":1,"message":"442","line":232,"column":9,"nodeType":"423","endLine":232,"endColumn":26,"suggestions":"443"},{"ruleId":"444","severity":1,"message":"445","line":259,"column":23,"nodeType":"446","messageId":"403","endLine":259,"endColumn":26},{"ruleId":"382","severity":1,"message":"447","line":294,"column":11,"nodeType":"384","messageId":"385","endLine":294,"endColumn":17},{"ruleId":"382","severity":1,"message":"404","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":17},{"ruleId":"382","severity":1,"message":"425","line":4,"column":10,"nodeType":"384","messageId":"385","endLine":4,"endColumn":14},{"ruleId":"382","severity":1,"message":"448","line":5,"column":8,"nodeType":"384","messageId":"385","endLine":5,"endColumn":17},{"ruleId":"382","severity":1,"message":"449","line":7,"column":10,"nodeType":"384","messageId":"385","endLine":7,"endColumn":21},{"ruleId":"382","severity":1,"message":"450","line":7,"column":23,"nodeType":"384","messageId":"385","endLine":7,"endColumn":38},{"ruleId":"382","severity":1,"message":"451","line":7,"column":52,"nodeType":"384","messageId":"385","endLine":7,"endColumn":60},{"ruleId":"382","severity":1,"message":"452","line":8,"column":9,"nodeType":"384","messageId":"385","endLine":8,"endColumn":13},{"ruleId":"382","severity":1,"message":"453","line":8,"column":14,"nodeType":"384","messageId":"385","endLine":8,"endColumn":22},{"ruleId":"382","severity":1,"message":"454","line":8,"column":23,"nodeType":"384","messageId":"385","endLine":8,"endColumn":33},{"ruleId":"382","severity":1,"message":"455","line":8,"column":34,"nodeType":"384","messageId":"385","endLine":8,"endColumn":42},{"ruleId":"382","severity":1,"message":"456","line":9,"column":10,"nodeType":"384","messageId":"385","endLine":9,"endColumn":15},{"ruleId":"382","severity":1,"message":"457","line":13,"column":11,"nodeType":"384","messageId":"385","endLine":13,"endColumn":16},{"ruleId":"382","severity":1,"message":"458","line":13,"column":18,"nodeType":"384","messageId":"385","endLine":13,"endColumn":29},{"ruleId":"382","severity":1,"message":"459","line":13,"column":31,"nodeType":"384","messageId":"385","endLine":13,"endColumn":40},{"ruleId":"382","severity":1,"message":"407","line":14,"column":5,"nodeType":"384","messageId":"385","endLine":14,"endColumn":8},{"ruleId":"382","severity":1,"message":"427","line":14,"column":9,"nodeType":"384","messageId":"385","endLine":14,"endColumn":14},{"ruleId":"382","severity":1,"message":"428","line":15,"column":5,"nodeType":"384","messageId":"385","endLine":15,"endColumn":14},{"ruleId":"382","severity":1,"message":"426","line":16,"column":5,"nodeType":"384","messageId":"385","endLine":16,"endColumn":10},{"ruleId":"382","severity":1,"message":"460","line":16,"column":11,"nodeType":"384","messageId":"385","endLine":16,"endColumn":15},{"ruleId":"382","severity":1,"message":"461","line":16,"column":17,"nodeType":"384","messageId":"385","endLine":16,"endColumn":25},{"ruleId":"382","severity":1,"message":"462","line":16,"column":27,"nodeType":"384","messageId":"385","endLine":16,"endColumn":32},{"ruleId":"382","severity":1,"message":"408","line":20,"column":8,"nodeType":"384","messageId":"385","endLine":20,"endColumn":22},{"ruleId":"382","severity":1,"message":"409","line":21,"column":8,"nodeType":"384","messageId":"385","endLine":21,"endColumn":15},{"ruleId":"382","severity":1,"message":"410","line":22,"column":8,"nodeType":"384","messageId":"385","endLine":22,"endColumn":18},{"ruleId":"382","severity":1,"message":"463","line":23,"column":8,"nodeType":"384","messageId":"385","endLine":23,"endColumn":16},{"ruleId":"382","severity":1,"message":"464","line":24,"column":8,"nodeType":"384","messageId":"385","endLine":24,"endColumn":18},{"ruleId":"382","severity":1,"message":"465","line":25,"column":8,"nodeType":"384","messageId":"385","endLine":25,"endColumn":24},{"ruleId":"382","severity":1,"message":"412","line":32,"column":8,"nodeType":"384","messageId":"385","endLine":32,"endColumn":14},{"ruleId":"382","severity":1,"message":"413","line":33,"column":8,"nodeType":"384","messageId":"385","endLine":33,"endColumn":13},{"ruleId":"382","severity":1,"message":"466","line":35,"column":16,"nodeType":"384","messageId":"385","endLine":35,"endColumn":26},{"ruleId":"382","severity":1,"message":"429","line":118,"column":11,"nodeType":"384","messageId":"385","endLine":118,"endColumn":18},{"ruleId":"421","severity":1,"message":"467","line":156,"column":9,"nodeType":"423","endLine":156,"endColumn":11,"suggestions":"468"},{"ruleId":"382","severity":1,"message":"397","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":38},{"ruleId":"382","severity":1,"message":"425","line":2,"column":10,"nodeType":"384","messageId":"385","endLine":2,"endColumn":14},{"ruleId":"382","severity":1,"message":"405","line":3,"column":10,"nodeType":"384","messageId":"385","endLine":3,"endColumn":17},{"ruleId":"382","severity":1,"message":"410","line":9,"column":8,"nodeType":"384","messageId":"385","endLine":9,"endColumn":18},{"ruleId":"382","severity":1,"message":"457","line":11,"column":11,"nodeType":"384","messageId":"385","endLine":11,"endColumn":16},{"ruleId":"382","severity":1,"message":"458","line":11,"column":18,"nodeType":"384","messageId":"385","endLine":11,"endColumn":29},{"ruleId":"382","severity":1,"message":"459","line":11,"column":31,"nodeType":"384","messageId":"385","endLine":11,"endColumn":40},{"ruleId":"382","severity":1,"message":"462","line":12,"column":26,"nodeType":"384","messageId":"385","endLine":12,"endColumn":31},{"ruleId":"382","severity":1,"message":"469","line":13,"column":11,"nodeType":"384","messageId":"385","endLine":13,"endColumn":23},{"ruleId":"382","severity":1,"message":"470","line":13,"column":36,"nodeType":"384","messageId":"385","endLine":13,"endColumn":44},{"ruleId":"382","severity":1,"message":"471","line":15,"column":12,"nodeType":"384","messageId":"385","endLine":15,"endColumn":17},{"ruleId":"382","severity":1,"message":"413","line":22,"column":8,"nodeType":"384","messageId":"385","endLine":22,"endColumn":13},{"ruleId":"382","severity":1,"message":"472","line":25,"column":8,"nodeType":"384","messageId":"385","endLine":25,"endColumn":16},{"ruleId":"382","severity":1,"message":"414","line":87,"column":12,"nodeType":"384","messageId":"385","endLine":87,"endColumn":19},{"ruleId":"382","severity":1,"message":"415","line":87,"column":21,"nodeType":"384","messageId":"385","endLine":87,"endColumn":31},{"ruleId":"382","severity":1,"message":"416","line":88,"column":12,"nodeType":"384","messageId":"385","endLine":88,"endColumn":28},{"ruleId":"382","severity":1,"message":"417","line":88,"column":30,"nodeType":"384","messageId":"385","endLine":88,"endColumn":49},{"ruleId":"382","severity":1,"message":"473","line":89,"column":11,"nodeType":"384","messageId":"385","endLine":89,"endColumn":18},{"ruleId":"382","severity":1,"message":"474","line":91,"column":12,"nodeType":"384","messageId":"385","endLine":91,"endColumn":16},{"ruleId":"382","severity":1,"message":"475","line":91,"column":18,"nodeType":"384","messageId":"385","endLine":91,"endColumn":25},{"ruleId":"382","severity":1,"message":"476","line":94,"column":12,"nodeType":"384","messageId":"385","endLine":94,"endColumn":18},{"ruleId":"382","severity":1,"message":"477","line":94,"column":20,"nodeType":"384","messageId":"385","endLine":94,"endColumn":29},{"ruleId":"431","severity":1,"message":"432","line":145,"column":29,"nodeType":"433","messageId":"434","endLine":145,"endColumn":31},{"ruleId":"400","severity":1,"message":"401","line":165,"column":51,"nodeType":"402","messageId":"403","endLine":165,"endColumn":53},{"ruleId":"400","severity":1,"message":"478","line":217,"column":61,"nodeType":"402","messageId":"403","endLine":217,"endColumn":63},{"ruleId":"400","severity":1,"message":"478","line":243,"column":52,"nodeType":"402","messageId":"403","endLine":243,"endColumn":54},{"ruleId":"400","severity":1,"message":"478","line":258,"column":47,"nodeType":"402","messageId":"403","endLine":258,"endColumn":49},{"ruleId":"400","severity":1,"message":"478","line":274,"column":48,"nodeType":"402","messageId":"403","endLine":274,"endColumn":50},{"ruleId":"400","severity":1,"message":"478","line":289,"column":48,"nodeType":"402","messageId":"403","endLine":289,"endColumn":50},{"ruleId":"400","severity":1,"message":"478","line":303,"column":49,"nodeType":"402","messageId":"403","endLine":303,"endColumn":51},{"ruleId":"400","severity":1,"message":"478","line":361,"column":52,"nodeType":"402","messageId":"403","endLine":361,"endColumn":54},{"ruleId":"382","severity":1,"message":"479","line":1,"column":16,"nodeType":"384","messageId":"385","endLine":1,"endColumn":25},{"ruleId":"382","severity":1,"message":"397","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":38},{"ruleId":"382","severity":1,"message":"480","line":1,"column":40,"nodeType":"384","messageId":"385","endLine":1,"endColumn":48},{"ruleId":"382","severity":1,"message":"425","line":2,"column":10,"nodeType":"384","messageId":"385","endLine":2,"endColumn":14},{"ruleId":"382","severity":1,"message":"481","line":2,"column":16,"nodeType":"384","messageId":"385","endLine":2,"endColumn":26},{"ruleId":"382","severity":1,"message":"457","line":5,"column":11,"nodeType":"384","messageId":"385","endLine":5,"endColumn":16},{"ruleId":"382","severity":1,"message":"458","line":5,"column":18,"nodeType":"384","messageId":"385","endLine":5,"endColumn":29},{"ruleId":"382","severity":1,"message":"459","line":5,"column":31,"nodeType":"384","messageId":"385","endLine":5,"endColumn":40},{"ruleId":"382","severity":1,"message":"407","line":6,"column":10,"nodeType":"384","messageId":"385","endLine":6,"endColumn":13},{"ruleId":"382","severity":1,"message":"427","line":6,"column":14,"nodeType":"384","messageId":"385","endLine":6,"endColumn":19},{"ruleId":"382","severity":1,"message":"428","line":7,"column":5,"nodeType":"384","messageId":"385","endLine":7,"endColumn":14},{"ruleId":"382","severity":1,"message":"426","line":8,"column":5,"nodeType":"384","messageId":"385","endLine":8,"endColumn":10},{"ruleId":"482","severity":1,"message":"483","line":29,"column":37,"nodeType":"484","endLine":29,"endColumn":94},{"ruleId":"485","severity":1,"message":"486","line":91,"column":41,"nodeType":"487","endLine":91,"endColumn":52},{"ruleId":"382","severity":1,"message":"488","line":4,"column":8,"nodeType":"384","messageId":"385","endLine":4,"endColumn":25},{"ruleId":"382","severity":1,"message":"408","line":11,"column":8,"nodeType":"384","messageId":"385","endLine":11,"endColumn":22},{"ruleId":"382","severity":1,"message":"489","line":12,"column":8,"nodeType":"384","messageId":"385","endLine":12,"endColumn":20},{"ruleId":"382","severity":1,"message":"490","line":13,"column":8,"nodeType":"384","messageId":"385","endLine":13,"endColumn":20},{"ruleId":"382","severity":1,"message":"491","line":14,"column":8,"nodeType":"384","messageId":"385","endLine":14,"endColumn":18},{"ruleId":"382","severity":1,"message":"492","line":16,"column":9,"nodeType":"384","messageId":"385","endLine":16,"endColumn":14},{"ruleId":"382","severity":1,"message":"493","line":30,"column":27,"nodeType":"384","messageId":"385","endLine":30,"endColumn":43},{"ruleId":"382","severity":1,"message":"494","line":36,"column":11,"nodeType":"384","messageId":"385","endLine":36,"endColumn":30},{"ruleId":"382","severity":1,"message":"404","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":17},{"ruleId":"382","severity":1,"message":"462","line":4,"column":26,"nodeType":"384","messageId":"385","endLine":4,"endColumn":31},{"ruleId":"382","severity":1,"message":"495","line":5,"column":8,"nodeType":"384","messageId":"385","endLine":5,"endColumn":21},{"ruleId":"382","severity":1,"message":"496","line":8,"column":17,"nodeType":"384","messageId":"385","endLine":8,"endColumn":24},{"ruleId":"382","severity":1,"message":"408","line":13,"column":8,"nodeType":"384","messageId":"385","endLine":13,"endColumn":22},{"ruleId":"382","severity":1,"message":"409","line":14,"column":8,"nodeType":"384","messageId":"385","endLine":14,"endColumn":15},{"ruleId":"382","severity":1,"message":"410","line":15,"column":8,"nodeType":"384","messageId":"385","endLine":15,"endColumn":18},{"ruleId":"382","severity":1,"message":"412","line":22,"column":8,"nodeType":"384","messageId":"385","endLine":22,"endColumn":14},{"ruleId":"382","severity":1,"message":"413","line":23,"column":8,"nodeType":"384","messageId":"385","endLine":23,"endColumn":13},{"ruleId":"382","severity":1,"message":"497","line":104,"column":7,"nodeType":"384","messageId":"385","endLine":104,"endColumn":17},{"ruleId":"382","severity":1,"message":"498","line":128,"column":11,"nodeType":"384","messageId":"385","endLine":128,"endColumn":22},{"ruleId":"382","severity":1,"message":"414","line":131,"column":12,"nodeType":"384","messageId":"385","endLine":131,"endColumn":19},{"ruleId":"382","severity":1,"message":"499","line":134,"column":12,"nodeType":"384","messageId":"385","endLine":134,"endColumn":20},{"ruleId":"421","severity":1,"message":"500","line":171,"column":8,"nodeType":"423","endLine":171,"endColumn":10,"suggestions":"501"},{"ruleId":"382","severity":1,"message":"502","line":173,"column":11,"nodeType":"384","messageId":"385","endLine":173,"endColumn":23},{"ruleId":"421","severity":1,"message":"500","line":188,"column":10,"nodeType":"423","endLine":188,"endColumn":12,"suggestions":"503"},{"ruleId":"421","severity":1,"message":"504","line":194,"column":8,"nodeType":"423","endLine":194,"endColumn":21,"suggestions":"505"},{"ruleId":"382","severity":1,"message":"506","line":196,"column":11,"nodeType":"384","messageId":"385","endLine":196,"endColumn":25},{"ruleId":"382","severity":1,"message":"507","line":214,"column":20,"nodeType":"384","messageId":"385","endLine":214,"endColumn":24},{"ruleId":"382","severity":1,"message":"479","line":1,"column":16,"nodeType":"384","messageId":"385","endLine":1,"endColumn":25},{"ruleId":"382","severity":1,"message":"397","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":38},{"ruleId":"382","severity":1,"message":"508","line":1,"column":50,"nodeType":"384","messageId":"385","endLine":1,"endColumn":56},{"ruleId":"382","severity":1,"message":"411","line":1,"column":58,"nodeType":"384","messageId":"385","endLine":1,"endColumn":68},{"ruleId":"382","severity":1,"message":"404","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":17},{"ruleId":"382","severity":1,"message":"462","line":4,"column":26,"nodeType":"384","messageId":"385","endLine":4,"endColumn":31},{"ruleId":"382","severity":1,"message":"495","line":5,"column":8,"nodeType":"384","messageId":"385","endLine":5,"endColumn":21},{"ruleId":"382","severity":1,"message":"461","line":13,"column":10,"nodeType":"384","messageId":"385","endLine":13,"endColumn":18},{"ruleId":"382","severity":1,"message":"469","line":14,"column":11,"nodeType":"384","messageId":"385","endLine":14,"endColumn":23},{"ruleId":"382","severity":1,"message":"470","line":14,"column":36,"nodeType":"384","messageId":"385","endLine":14,"endColumn":44},{"ruleId":"382","severity":1,"message":"471","line":16,"column":12,"nodeType":"384","messageId":"385","endLine":16,"endColumn":17},{"ruleId":"382","severity":1,"message":"408","line":20,"column":8,"nodeType":"384","messageId":"385","endLine":20,"endColumn":22},{"ruleId":"382","severity":1,"message":"409","line":21,"column":8,"nodeType":"384","messageId":"385","endLine":21,"endColumn":15},{"ruleId":"382","severity":1,"message":"410","line":22,"column":8,"nodeType":"384","messageId":"385","endLine":22,"endColumn":18},{"ruleId":"382","severity":1,"message":"413","line":31,"column":8,"nodeType":"384","messageId":"385","endLine":31,"endColumn":13},{"ruleId":"431","severity":1,"message":"432","line":104,"column":43,"nodeType":"433","messageId":"434","endLine":104,"endColumn":45},{"ruleId":"382","severity":1,"message":"414","line":111,"column":12,"nodeType":"384","messageId":"385","endLine":111,"endColumn":19},{"ruleId":"382","severity":1,"message":"415","line":111,"column":21,"nodeType":"384","messageId":"385","endLine":111,"endColumn":31},{"ruleId":"382","severity":1,"message":"509","line":112,"column":12,"nodeType":"384","messageId":"385","endLine":112,"endColumn":19},{"ruleId":"382","severity":1,"message":"510","line":112,"column":21,"nodeType":"384","messageId":"385","endLine":112,"endColumn":31},{"ruleId":"393","severity":1,"message":"511","line":162,"column":41,"nodeType":"395","messageId":"396","endLine":162,"endColumn":43},{"ruleId":"393","severity":1,"message":"511","line":162,"column":58,"nodeType":"395","messageId":"396","endLine":162,"endColumn":60},{"ruleId":"393","severity":1,"message":"394","line":162,"column":58,"nodeType":"395","messageId":"396","endLine":162,"endColumn":60},{"ruleId":"393","severity":1,"message":"394","line":162,"column":87,"nodeType":"395","messageId":"396","endLine":162,"endColumn":89},{"ruleId":"393","severity":1,"message":"394","line":162,"column":104,"nodeType":"395","messageId":"396","endLine":162,"endColumn":106},{"ruleId":"393","severity":1,"message":"394","line":162,"column":133,"nodeType":"395","messageId":"396","endLine":162,"endColumn":135},{"ruleId":"431","severity":1,"message":"432","line":181,"column":30,"nodeType":"433","messageId":"434","endLine":181,"endColumn":32},{"ruleId":"382","severity":1,"message":"508","line":1,"column":50,"nodeType":"384","messageId":"385","endLine":1,"endColumn":56},{"ruleId":"382","severity":1,"message":"411","line":1,"column":58,"nodeType":"384","messageId":"385","endLine":1,"endColumn":68},{"ruleId":"382","severity":1,"message":"404","line":2,"column":8,"nodeType":"384","messageId":"385","endLine":2,"endColumn":17},{"ruleId":"382","severity":1,"message":"425","line":3,"column":10,"nodeType":"384","messageId":"385","endLine":3,"endColumn":14},{"ruleId":"382","severity":1,"message":"495","line":5,"column":8,"nodeType":"384","messageId":"385","endLine":5,"endColumn":21},{"ruleId":"382","severity":1,"message":"448","line":6,"column":8,"nodeType":"384","messageId":"385","endLine":6,"endColumn":17},{"ruleId":"382","severity":1,"message":"512","line":8,"column":8,"nodeType":"384","messageId":"385","endLine":8,"endColumn":16},{"ruleId":"382","severity":1,"message":"513","line":12,"column":8,"nodeType":"384","messageId":"385","endLine":12,"endColumn":22},{"ruleId":"382","severity":1,"message":"461","line":14,"column":10,"nodeType":"384","messageId":"385","endLine":14,"endColumn":18},{"ruleId":"382","severity":1,"message":"469","line":15,"column":11,"nodeType":"384","messageId":"385","endLine":15,"endColumn":23},{"ruleId":"382","severity":1,"message":"470","line":15,"column":36,"nodeType":"384","messageId":"385","endLine":15,"endColumn":44},{"ruleId":"382","severity":1,"message":"471","line":17,"column":12,"nodeType":"384","messageId":"385","endLine":17,"endColumn":17},{"ruleId":"382","severity":1,"message":"496","line":17,"column":19,"nodeType":"384","messageId":"385","endLine":17,"endColumn":26},{"ruleId":"382","severity":1,"message":"408","line":21,"column":8,"nodeType":"384","messageId":"385","endLine":21,"endColumn":22},{"ruleId":"382","severity":1,"message":"409","line":22,"column":8,"nodeType":"384","messageId":"385","endLine":22,"endColumn":15},{"ruleId":"382","severity":1,"message":"410","line":23,"column":8,"nodeType":"384","messageId":"385","endLine":23,"endColumn":18},{"ruleId":"382","severity":1,"message":"514","line":24,"column":8,"nodeType":"384","messageId":"385","endLine":24,"endColumn":18},{"ruleId":"382","severity":1,"message":"413","line":31,"column":8,"nodeType":"384","messageId":"385","endLine":31,"endColumn":13},{"ruleId":"382","severity":1,"message":"515","line":94,"column":11,"nodeType":"384","messageId":"385","endLine":94,"endColumn":22},{"ruleId":"382","severity":1,"message":"498","line":96,"column":11,"nodeType":"384","messageId":"385","endLine":96,"endColumn":22},{"ruleId":"382","severity":1,"message":"414","line":101,"column":12,"nodeType":"384","messageId":"385","endLine":101,"endColumn":19},{"ruleId":"400","severity":1,"message":"401","line":153,"column":50,"nodeType":"402","messageId":"403","endLine":153,"endColumn":52},{"ruleId":"400","severity":1,"message":"478","line":251,"column":53,"nodeType":"402","messageId":"403","endLine":251,"endColumn":55},{"ruleId":"400","severity":1,"message":"478","line":266,"column":53,"nodeType":"402","messageId":"403","endLine":266,"endColumn":55},{"ruleId":"400","severity":1,"message":"478","line":282,"column":57,"nodeType":"402","messageId":"403","endLine":282,"endColumn":59},{"ruleId":"400","severity":1,"message":"478","line":300,"column":58,"nodeType":"402","messageId":"403","endLine":300,"endColumn":60},{"ruleId":"382","severity":1,"message":"469","line":2,"column":43,"nodeType":"384","messageId":"385","endLine":2,"endColumn":55},{"ruleId":"382","severity":1,"message":"405","line":9,"column":10,"nodeType":"384","messageId":"385","endLine":9,"endColumn":17},{"ruleId":"382","severity":1,"message":"516","line":10,"column":8,"nodeType":"384","messageId":"385","endLine":10,"endColumn":12},{"ruleId":"382","severity":1,"message":"517","line":11,"column":8,"nodeType":"384","messageId":"385","endLine":11,"endColumn":17},{"ruleId":"382","severity":1,"message":"518","line":12,"column":8,"nodeType":"384","messageId":"385","endLine":12,"endColumn":20},{"ruleId":"382","severity":1,"message":"519","line":15,"column":10,"nodeType":"384","messageId":"385","endLine":15,"endColumn":24},{"ruleId":"382","severity":1,"message":"520","line":16,"column":8,"nodeType":"384","messageId":"385","endLine":16,"endColumn":14},{"ruleId":"382","severity":1,"message":"521","line":17,"column":8,"nodeType":"384","messageId":"385","endLine":17,"endColumn":23},{"ruleId":"382","severity":1,"message":"522","line":18,"column":8,"nodeType":"384","messageId":"385","endLine":18,"endColumn":14},{"ruleId":"382","severity":1,"message":"496","line":20,"column":10,"nodeType":"384","messageId":"385","endLine":20,"endColumn":17},{"ruleId":"382","severity":1,"message":"523","line":95,"column":11,"nodeType":"384","messageId":"385","endLine":95,"endColumn":18},{"ruleId":"431","severity":1,"message":"432","line":102,"column":43,"nodeType":"433","messageId":"434","endLine":102,"endColumn":45},{"ruleId":"382","severity":1,"message":"415","line":108,"column":21,"nodeType":"384","messageId":"385","endLine":108,"endColumn":31},{"ruleId":"382","severity":1,"message":"524","line":109,"column":12,"nodeType":"384","messageId":"385","endLine":109,"endColumn":19},{"ruleId":"382","severity":1,"message":"525","line":110,"column":11,"nodeType":"384","messageId":"385","endLine":110,"endColumn":20},{"ruleId":"382","severity":1,"message":"473","line":111,"column":12,"nodeType":"384","messageId":"385","endLine":111,"endColumn":19},{"ruleId":"382","severity":1,"message":"526","line":111,"column":21,"nodeType":"384","messageId":"385","endLine":111,"endColumn":31},{"ruleId":"382","severity":1,"message":"527","line":112,"column":12,"nodeType":"384","messageId":"385","endLine":112,"endColumn":24},{"ruleId":"382","severity":1,"message":"528","line":112,"column":26,"nodeType":"384","messageId":"385","endLine":112,"endColumn":41},{"ruleId":"382","severity":1,"message":"529","line":113,"column":12,"nodeType":"384","messageId":"385","endLine":113,"endColumn":28},{"ruleId":"382","severity":1,"message":"530","line":113,"column":30,"nodeType":"384","messageId":"385","endLine":113,"endColumn":49},{"ruleId":"382","severity":1,"message":"531","line":120,"column":12,"nodeType":"384","messageId":"385","endLine":120,"endColumn":18},{"ruleId":"382","severity":1,"message":"532","line":120,"column":20,"nodeType":"384","messageId":"385","endLine":120,"endColumn":29},{"ruleId":"431","severity":1,"message":"432","line":151,"column":29,"nodeType":"433","messageId":"434","endLine":151,"endColumn":31},{"ruleId":"393","severity":1,"message":"511","line":179,"column":42,"nodeType":"395","messageId":"396","endLine":179,"endColumn":44},{"ruleId":"393","severity":1,"message":"511","line":179,"column":59,"nodeType":"395","messageId":"396","endLine":179,"endColumn":61},{"ruleId":"393","severity":1,"message":"394","line":179,"column":59,"nodeType":"395","messageId":"396","endLine":179,"endColumn":61},{"ruleId":"393","severity":1,"message":"394","line":179,"column":88,"nodeType":"395","messageId":"396","endLine":179,"endColumn":90},{"ruleId":"393","severity":1,"message":"394","line":179,"column":105,"nodeType":"395","messageId":"396","endLine":179,"endColumn":107},{"ruleId":"393","severity":1,"message":"394","line":179,"column":134,"nodeType":"395","messageId":"396","endLine":179,"endColumn":136},{"ruleId":"382","severity":1,"message":"469","line":2,"column":43,"nodeType":"384","messageId":"385","endLine":2,"endColumn":55},{"ruleId":"382","severity":1,"message":"533","line":2,"column":60,"nodeType":"384","messageId":"385","endLine":2,"endColumn":65},{"ruleId":"382","severity":1,"message":"463","line":7,"column":8,"nodeType":"384","messageId":"385","endLine":7,"endColumn":16},{"ruleId":"382","severity":1,"message":"464","line":9,"column":8,"nodeType":"384","messageId":"385","endLine":9,"endColumn":18},{"ruleId":"382","severity":1,"message":"405","line":10,"column":10,"nodeType":"384","messageId":"385","endLine":10,"endColumn":17},{"ruleId":"382","severity":1,"message":"516","line":11,"column":8,"nodeType":"384","messageId":"385","endLine":11,"endColumn":12},{"ruleId":"382","severity":1,"message":"517","line":12,"column":8,"nodeType":"384","messageId":"385","endLine":12,"endColumn":17},{"ruleId":"382","severity":1,"message":"518","line":13,"column":8,"nodeType":"384","messageId":"385","endLine":13,"endColumn":20},{"ruleId":"382","severity":1,"message":"519","line":16,"column":10,"nodeType":"384","messageId":"385","endLine":16,"endColumn":24},{"ruleId":"382","severity":1,"message":"520","line":17,"column":8,"nodeType":"384","messageId":"385","endLine":17,"endColumn":14},{"ruleId":"382","severity":1,"message":"521","line":18,"column":8,"nodeType":"384","messageId":"385","endLine":18,"endColumn":23},{"ruleId":"382","severity":1,"message":"522","line":19,"column":8,"nodeType":"384","messageId":"385","endLine":19,"endColumn":14},{"ruleId":"382","severity":1,"message":"496","line":21,"column":10,"nodeType":"384","messageId":"385","endLine":21,"endColumn":17},{"ruleId":"382","severity":1,"message":"523","line":84,"column":11,"nodeType":"384","messageId":"385","endLine":84,"endColumn":18},{"ruleId":"382","severity":1,"message":"414","line":88,"column":12,"nodeType":"384","messageId":"385","endLine":88,"endColumn":19},{"ruleId":"382","severity":1,"message":"524","line":89,"column":12,"nodeType":"384","messageId":"385","endLine":89,"endColumn":19},{"ruleId":"382","severity":1,"message":"525","line":90,"column":11,"nodeType":"384","messageId":"385","endLine":90,"endColumn":20},{"ruleId":"382","severity":1,"message":"534","line":91,"column":12,"nodeType":"384","messageId":"385","endLine":91,"endColumn":18},{"ruleId":"382","severity":1,"message":"535","line":91,"column":20,"nodeType":"384","messageId":"385","endLine":91,"endColumn":29},{"ruleId":"382","severity":1,"message":"529","line":95,"column":12,"nodeType":"384","messageId":"385","endLine":95,"endColumn":28},{"ruleId":"382","severity":1,"message":"530","line":95,"column":30,"nodeType":"384","messageId":"385","endLine":95,"endColumn":49},{"ruleId":"382","severity":1,"message":"531","line":97,"column":12,"nodeType":"384","messageId":"385","endLine":97,"endColumn":18},{"ruleId":"382","severity":1,"message":"532","line":97,"column":20,"nodeType":"384","messageId":"385","endLine":97,"endColumn":29},{"ruleId":"382","severity":1,"message":"507","line":122,"column":16,"nodeType":"384","messageId":"385","endLine":122,"endColumn":20},{"ruleId":"382","severity":1,"message":"479","line":1,"column":16,"nodeType":"384","messageId":"385","endLine":1,"endColumn":25},{"ruleId":"382","severity":1,"message":"397","line":1,"column":27,"nodeType":"384","messageId":"385","endLine":1,"endColumn":38},{"ruleId":"382","severity":1,"message":"480","line":1,"column":40,"nodeType":"384","messageId":"385","endLine":1,"endColumn":48},{"ruleId":"382","severity":1,"message":"425","line":2,"column":10,"nodeType":"384","messageId":"385","endLine":2,"endColumn":14},{"ruleId":"382","severity":1,"message":"481","line":2,"column":16,"nodeType":"384","messageId":"385","endLine":2,"endColumn":26},{"ruleId":"382","severity":1,"message":"407","line":4,"column":15,"nodeType":"384","messageId":"385","endLine":4,"endColumn":18},{"ruleId":"382","severity":1,"message":"457","line":6,"column":11,"nodeType":"384","messageId":"385","endLine":6,"endColumn":16},{"ruleId":"382","severity":1,"message":"458","line":6,"column":18,"nodeType":"384","messageId":"385","endLine":6,"endColumn":29},{"ruleId":"382","severity":1,"message":"459","line":6,"column":31,"nodeType":"384","messageId":"385","endLine":6,"endColumn":40},{"ruleId":"382","severity":1,"message":"427","line":7,"column":5,"nodeType":"384","messageId":"385","endLine":7,"endColumn":10},{"ruleId":"382","severity":1,"message":"428","line":8,"column":5,"nodeType":"384","messageId":"385","endLine":8,"endColumn":14},{"ruleId":"382","severity":1,"message":"426","line":9,"column":5,"nodeType":"384","messageId":"385","endLine":9,"endColumn":10},{"ruleId":"485","severity":1,"message":"486","line":86,"column":47,"nodeType":"487","endLine":86,"endColumn":58},{"ruleId":"485","severity":1,"message":"486","line":100,"column":43,"nodeType":"487","endLine":100,"endColumn":54},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["536"],"no-negated-in-lhs",["537"],"'SampleSearch' is defined but never used.","'makeStyles' is defined but never used.","'labObj' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'useCallback' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Container' is defined but never used.","'connect' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'VisibilityIcon' is defined but never used.","'Tooltip' is defined but never used.","'IconButton' is defined but never used.","'forwardRef' is defined but never used.","'Button' is defined but never used.","'Stack' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'collectedSamples' is assigned a value but never used.","'setCollectedSamples' is assigned a value but never used.","'manifestData' is assigned a value but never used.","'saved' is assigned a value but never used.","'setSaved' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sampleObj'. Either include it or remove the dependency array.","ArrayExpression",["538"],"'Link' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'FormGroup' is defined but never used.","'classes' is assigned a value but never used.","'handleChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"539","text":"540"},"'onSuccess' is assigned a value but never used.","'onError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadManifestData'. Either include it or remove the dependency array.",["541"],"no-dupe-keys","Duplicate key 'age'.","ObjectExpression","'values' is assigned a value but never used.","'MatButton' is defined but never used.","'MdDashboard' is defined but never used.","'MdDeleteForever' is defined but never used.","'MdPerson' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'alpha' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'Table' is defined but never used.","'SaveIcon' is defined but never used.","'CancelIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'FaUserPlus' is defined but never used.","React Hook useEffect has a missing dependency: 'loadConfig'. Either include it or remove the dependency array.",["542"],"'FormFeedback' is defined but never used.","'FormText' is defined but never used.","'Badge' is defined but never used.","'SendIcon' is defined but never used.","'samples' is assigned a value but never used.","'send' is assigned a value but never used.","'setSend' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'ArrowDropDownIcon' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'ContentCut' is defined but never used.","'FaEye' is defined but never used.","'setSelectedIndex' is assigned a value but never used.","'handleMenuItemClick' is assigned a value but never used.","'MaterialTable' is defined but never used.","'Spinner' is defined but never used.","'tableIcons' is assigned a value but never used.","'permissions' is assigned a value but never used.","'configId' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'manifestObj.id'. Either include it or remove the dependency array.",["543"],"'getPCResults' is assigned a value but never used.",["544"],"React Hook useEffect has a missing dependency: 'loadConfigs'. Either include it or remove the dependency array.",["545"],"'resultTestType' is assigned a value but never used.","'name' is assigned a value but never used.","'useRef' is defined but never used.","'results' is assigned a value but never used.","'setResults' is assigned a value but never used.","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'HomeIcon' is defined but never used.","'AddResultModal' is defined but never used.","'CachedIcon' is defined but never used.","'manifestObj' is assigned a value but never used.","'Chip' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'DateTimePicker' is defined but never used.","'Moment' is defined but never used.","'momentLocalizer' is defined but never used.","'moment' is defined but never used.","'history' is assigned a value but never used.","'visible' is assigned a value but never used.","'onDismiss' is assigned a value but never used.","'setSamples' is assigned a value but never used.","'optionsample' is assigned a value but never used.","'setOptionsample' is assigned a value but never used.","'saveButtonStatus' is assigned a value but never used.","'setSaveButtonStatus' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'Alert' is defined but never used.","'config' is assigned a value but never used.","'setConfig' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"546","fix":"547"},[7055,7083],"\r\n                         .",{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"552","fix":"554"},{"desc":"555","fix":"556"},"Update the dependencies array to be: [sampleObj]",{"range":"557","text":"558"},"Update the dependencies array to be: [loadLabTestData, loadManifestData]",{"range":"559","text":"560"},"Update the dependencies array to be: [loadConfig]",{"range":"561","text":"562"},"Update the dependencies array to be: [manifestObj.id]",{"range":"563","text":"564"},{"range":"565","text":"564"},"Update the dependencies array to be: [loadConfigs, loadResults]",{"range":"566","text":"567"},[3200,3202],"[sampleObj]",[8887,8904],"[loadLabTestData, loadManifestData]",[5690,5692],"[loadConfig]",[6411,6413],"[manifestObj.id]",[7147,7149],[7257,7270],"[loadConfigs, loadResults]"]